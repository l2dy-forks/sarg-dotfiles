#+OPTIONS: num:nil
* Theme
#+begin_src elisp :tangle packages.el
(package! circadian)
(package! white-sand-theme)
(package! kaolin-themes)
#+end_src

#+begin_src elisp
(use-package! white-sand-theme)
(defvar doom-theme-dark 'kaolin-valley-dark)
(setq doom-theme 'white-sand
      doom-font (font-spec :family "Hack" :size 20)
      doom-serif-font (font-spec :family "Hack")
      doom-unicode-font (font-spec :family "Hack"))

;; Change color theme based on day time
(use-package! circadian
  :config
  (setq calendar-latitude 52.516667
        calendar-longitude 13.388889
        circadian-themes
        `((:sunrise . ,doom-theme)
          (:sunset . ,doom-theme-dark)))
  (circadian-setup))
#+end_src

* miscellaneous
#+begin_src elisp :tangle packages.el
(package! keyfreq)
#+end_src

#+begin_src elisp
(setq +modeline-encoding nil
      +modeline-height 20
      locate-command "/storage/locator")

;; C-h deletes character backwards
(define-key key-translation-map [?\C-h] [?\C-?])

(setq-default
 ;; russian layout on C-\
 default-input-method "russian-computer")

(use-package! keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src

Debug icons in modeline, find out their names.
#+begin_src elisp :tangle no
(defadvice! +debug-modeline-format-icon (icon-set icon label &optional face &rest args)
  :override +modeline-format-icon
  (propertize (format "X %s" label) 'face face))
#+end_src
* buffers
#+begin_src elisp :tangle packages.el
(package! bufler)
#+end_src

#+begin_src elisp
(use-package! bufler
  :config

  (after! evil-collection
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "C-k") 'bufler-list-buffer-kill
      "r" 'bufler
      (kbd "RET") 'bufler-list-buffer-switch))

  :custom
  (bufler-groups
   (bufler-defgroups
     (group (mode-match "Telega" (rx bos "telega-chat")))
     (group
      (lambda (buffer)
        (and
         (funcall (mode-match "exwm-mode" (rx bos "exwm-mode")) buffer)
         "X11"))
      (group
       (lambda (buffer)
         (and
          (string= "qutebrowser"
                   (buffer-local-value 'exwm-class-name buffer))
          "WWW"))))
     (group (auto-project))
     (auto-directory))))
#+end_src
* org mode
#+begin_src elisp :tangle packages.el
(package! linkmarks :recipe (:host github :repo "dustinlacewell/linkmarks"))
#+end_src

#+begin_src elisp
(setq
 org-directory (expand-file-name "~/Sync/org/")
 org-src-window-setup 'current-window
 org-fold-catch-invisible-edits 'show-and-error)

(use-package! org-contacts
  :custom
  (org-contacts-files (list (expand-file-name "contacts.org" org-directory))))

(use-package! linkmarks
  :custom
  (linkmarks-file (expand-file-name "links.org" org-directory)))

(after! org-download
  (setq org-download-screenshot-method "flameshot gui --raw > %s"))

(load! "org-defuns")
#+end_src
** capture
#+begin_src shell :tangle ~/.local/bin/emacs-capture
#!/bin/sh
emacsclient -F '((name . "doom-capture") (height . 10) (width . 80))' "$@"
#+end_src

#+begin_src python :tangle ~/.local/share/qutebrowser/userscripts/orgprotocol
#!/usr/bin/env python3
import os
import subprocess
from urllib.parse import quote

subprocess.call(['emacs-capture',
  'org-protocol://capture?template=t&url={url}&title={title}&body={body}'.format(
    url   = quote(os.environ.get('QUTE_URL', '')),
    title = quote(os.environ.get('QUTE_TITLE', '')),
    body  = quote(os.environ.get('QUTE_SELECTED_TEXT', ''))
  )
])
#+end_src
** Agenda
#+begin_src elisp
(setq
 org-agenda-files
 (-map (lambda (el) (expand-file-name el org-directory))
       '("projects.org"
         "tickler.org")))
#+end_src

** Roam
#+begin_src elisp
(after! org-roam
  (setq org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags))))))
#+end_src
** elasticsearch
#+begin_src elisp :tangle no
(package! es-mode)
#+end_src

#+begin_src elisp :tangle no
(use-package! es-mode
  :commands (org-babel-execute:es)

  :config
  (appendq!
   +org-babel-mode-alist '((es . elasticsearch))))
#+end_src
* git
#+begin_src elisp :tangle packages.el
(package! magit-todos :disable t) ; too slow
#+end_src

#+begin_src elisp
(after! magit
  (let ((sarg-repos-dir (expand-file-name "~/devel/")))
    (setq magit-repository-directories `((,sarg-repos-dir . 2))
          magit-clone-default-directory `,sarg-repos-dir)))

(after! browse-at-remote
  (setq browse-at-remote-prefer-symbolic nil))
#+end_src
* tramp
#+begin_src elisp
(after! tramp
  (pushnew! tramp-remote-path 'tramp-own-remote-path))
#+end_src
* book reading
#+begin_src elisp :tangle packages.el
(package! calibredb :built-in 'prefer)
;(package! nov)
#+end_src

#+begin_src elisp :tangle no
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)

  :custom
  (nov-variable-pitch nil)
  (nov-text-width t))
#+end_src

#+begin_src elisp
(use-package! calibredb
  :config
  (setq calibredb-root-dir (expand-file-name "~/Calibre Library")
        calibredb-db-dir (concat calibredb-root-dir "/metadata.db")
        calibredb-library-alist '(("~/Calibre Library"))
        calibredb-preferred-format 'epub ;; just open it, don't ask

        ;; hide extra columns
        calibredb-date-width 0
        calibredb-format-width 0
        calibredb-tag-width 0
        calibredb-comment-width 0)

  (defalias 'calibredb-open-with-default-tool #'find-file))
#+end_src

* wpa-manager
#+begin_src elisp :tangle packages.el
(package! wpa-manager
  :recipe (:host github :repo "sarg/wpa-manager.el"))
#+end_src

#+begin_src elisp
(use-package! wpa-manager
  :init
  (when (modulep! :editor evil +everywhere)

    (evil-collection-inhibit-insert-state 'wpa-manager-mode-map)
    (evil-set-initial-state 'wpa-manager-mode-map 'normal)
    (evil-collection-define-key 'normal 'wpa-manager-mode-map
      "s" 'wpa-manager-scan
      "r" 'revert-buffer
      "c" 'wpa-manager-connect
      (kbd "RET") 'wpa-manager-connect)))
#+end_src
* password-store
#+begin_src elisp :tangle packages.el
(package! password-generator)
#+end_src

#+begin_src elisp
(setq password-cache-expiry (* 60 15))

;; for magithub auth to work create pass entry user^magithub@api.github.com
(after! magit
    (setq magit-process-find-password-functions '(magit-process-password-auth-source)))

(use-package! password-generator
  :after password-store

  :config
  (defadvice! +password-store-generate-strong (entry &optional len)
    :override #'password-store-generate
    (interactive (list (password-store--completing-read)
                       (when current-prefix-arg
                         (abs (prefix-numeric-value current-prefix-arg)))))
    (let ((pass
           (password-generator-strong
            (or len password-store-password-length) t)))
      (password-store-insert entry pass))))
#+end_src

** Qutebrowser integration
#+begin_src elisp
(defun +pass/qute (url)
  (auth-source-pass--read-entry
   (completing-read "Pass: "
                    (password-store-list)
                    nil t url)))
#+end_src

See [[../../qutebrowser/.config/qutebrowser/password_fill_rc]]

** Wrapper for CLI
#+begin_src elisp
(defalias '+pass/read-entry #'auth-source-pass--read-entry)
#+end_src

See [[../.local/bin/pass]]

* elfeed
#+begin_src elisp
(defun ambrevar/elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
        (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with heightâ‰¤%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

(defvar elfeed-mpv-patterns
  '("youtu\\.?be")
  "List of regexp to match against elfeed entry link to know whether to use mpv to visit the link.")

(defun ambrevar/elfeed-visit-or-play-with-mpv ()
  "Play in mpv if entry link matches `elfeed-mpv-patterns', visit otherwise. See `elfeed-play-with-mpv'."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (patterns elfeed-mpv-patterns))
    (while (and patterns (not (string-match (car elfeed-mpv-patterns) (elfeed-entry-link entry))))
      (setq patterns (cdr patterns)))
    (if patterns
        (ambrevar/elfeed-play-with-mpv)
      (if (eq major-mode 'elfeed-search-mode)
          (elfeed-search-browse-url)
        (elfeed-show-visit)))))

(defun sarg/elfeed-strip-content (entry)
  (when (find "rmbody" (elfeed-entry-tags entry))
    (setf (elfeed-entry-content entry) (elfeed-ref ""))
    (elfeed-untag entry "rmbody")))

(after! elfeed
  (add-hook 'elfeed-new-entry-hook #'sarg/elfeed-strip-content)
  (add-hook 'elfeed-show-mode-hook (lambda () (setq-local browse-url-generic-program "qutebrowser-background")))

  (setq elfeed-search-filter "@2-week-ago +unread -youtube"
        elfeed-show-entry-switch (lambda (buf) (display-buffer-below-selected buf nil) (select-window (get-buffer-window buf))))

  (evil-define-key 'normal elfeed-show-mode-map
    "go" 'ambrevar/elfeed-visit-or-play-with-mpv))
#+end_src

#+begin_src sh :tangle ~/.local/bin/qutebrowser-background
#!/bin/sh
qutebrowser --nowindow --target tab-bg-silent $@
#+end_src

* dict
#+begin_src elisp :tangle packages.el
(package! dictcc)
(package! multitran)
;(package! google-translate)
;(package! powerthesaurus)
#+end_src

#+begin_src elisp
(use-package! dictcc)
(use-package! multitran)
#+end_src
* email
#+begin_src elisp
(defun sarg/ensure-msmtp-pass-available ()
  (interactive)
  (+pass/read-entry (concat "Email/" user-mail-address)))

(after! mu4e
  (setq mu4e-filter-inbox "flag:unread AND NOT flag:trashed AND maildir:/gmail/Inbox"
        mu4e-bookmarks '((mu4e-filter-inbox "Gmail messages" ?u)
                         ("date:today..now AND NOT flag:trashed AND NOT maildir:/gmail/trash" "Today's messages" 116))

        mu4e-alert-interesting-mail-query mu4e-filter-inbox)

  (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . 8bit))
  (advice-add 'sendmail-send-it
              :before #'sarg/ensure-msmtp-pass-available)

  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        mu4e-compose-format-flowed t ; visual-line-mode + auto-fill upon sending
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))

(set-email-account! "sarg"
  '((mu4e-sent-folder   . "/gmail/sent")
    (mu4e-drafts-folder . "/gmail/drafts")
    (mu4e-trash-folder  . "/gmail/trash")
    (mu4e-refile-folder . "/gmail/all")
    (smtpmail-smtp-user . "sarg@sarg.org.ru")
    (user-mail-address  . "sarg@sarg.org.ru"))
  t)
#+end_src

* browsing
#+begin_src elisp :tangle packages.el
(package! webpaste)
(package! web-search)
#+end_src

#+begin_src elisp
(defun browse-url-qute-private (url &optional new-window)
  "Make firefox open URL in private-browsing window."
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((process-environment (browse-url-process-environment)))
    (apply 'start-process
           (concat "qutebrowser " url)
           nil
           "qutebrowser"
           (list (concat ":open -p " url)))))

;; (setq browse-url-browser-function
;;       '(("^https?://some.addr.com" . browse-url-qute-private)
;;         ("." . browse-url-default-browser)))

(setq-default
 browse-url-browser-function 'browse-url-generic
 browse-url-generic-program "qutebrowser")

(use-package! webpaste)
(use-package! web-search
  :custom
  (web-search-default-provider "DuckDuckGo"))
#+end_src
* shell
#+begin_src elisp
(after! eshell
  (add-hook 'eshell-first-time-mode-hook
            (lambda ()
              (map! :map eshell-mode-map
                    :ni "C-r" #'+eshell/search-history))))

(use-package! eat
  :hook (eshell-load-hook . (eat-eshell-mode eat-eshell-visual-command-mode)))

(use-package! detached
  :init
  (detached-init)
  :bind (;; Replace `async-shell-command' with `detached-shell-command'
         ([remap async-shell-command] . detached-shell-command)
         ;; Replace `compile' with `detached-compile'
         ([remap compile] . detached-compile)
         ([remap recompile] . detached-compile-recompile)
         ;; Replace built in completion of sessions with `consult'
         ([remap detached-open-session] . detached-consult-session))
  :custom ((detached-show-output-on-attach t)
           (detached-terminal-data-command system-type)))
#+end_src

* dired
#+begin_src elisp :tangle packages.el
(package! dired-filter)
(package! dired-avfs)
(package! dired-du)
(package! dired-collapse)
(package! dired-git-info :recipe (:host github :repo "clemera/dired-git-info"))
(package! openwith)
#+end_src

#+begin_src elisp
(use-package! dired-filter
  :hook (dired-mode . dired-filter-mode)
  :custom
  (dired-filter-stack '((omit) (dot-files))))

(use-package! dired-collapse
  :hook (dired-mode . dired-collapse-mode))

(use-package! dired-git-info
  :custom
  (dgi-commit-message-format "%cr\t%s"))

(use-package! dired-avfs)
(use-package! dired-du
  :custom
  ;; human readable
  (dired-du-size-format 't))

(add-hook! dired-mode #'dired-hide-details-mode)

(after! async
  (dired-async-mode 1))

(defun openwith-has-association (file)
  (-any? (lambda (oa) (string-match (car oa) file)) openwith-associations))

(use-package! openwith
  :hook (after-init . openwith-mode)
  :config

  (setq openwith-associations
        '(("\\.\\(?:pdf\\|epub\\)\\'" "zathura" (file))
          ("\\.\\(?:mkv\\|webm\\|avi\\|mp4\\)\\'" "mpv" (file))))
  ;; (openwith-mode)
  ;; Don't ask if file is too large when it'll be handled by openwith-mode.
  (advice-add 'abort-if-file-too-large :before-until
              (lambda (size op-type filename &rest args)
                (and (boundp 'openwith-mode) openwith-mode
                     (openwith-has-association filename)))))
#+end_src

* openscad
#+begin_src elisp :tangle no
(defun openscad-preview ()
  (interactive)
  (select-window (split-window-right))
  (start-process "openscad" nil "openscad" (buffer-file-name)))
#+end_src

* selfcontrol
#+begin_src elisp :tangle no
(defun sarg/ad-selfcontrol-time-restriction (orig-fun &rest args)
  (if (or (= 0 (mod
                (calendar-day-of-week (calendar-current-date))
                6)) ; 0 and 6 - Sunday and Saturday
          (> (nth 2 (decode-time)) 18))
      (apply orig-fun args)
    (message "It's not the time yet!")))

(defun sarg/ad-selfcontrol-otp-confirm (proc &rest args)
  "Asks to enter random string as confirmation before executing PROC."
  (interactive)
  (let* ((pass (format "%06x%06x%06x"
                       (random (expt 16 6))
                       (random (expt 16 6))
                       (random (expt 16 6))))

         (input (read-string (format "Enter %s if you wish to proceed: " pass))))

    (if (string= input pass)
        (apply proc args))))

(after! elfeed
  (advice-add 'elfeed-update :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add '=rss :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add 'elfeed-update :around #'sarg/selfcontrol-time-restriction))

(after! telega
  (advice-add 'ivy-telega-chat-with :around #'sarg/ad-selfcontrol-otp-confirm))
#+end_src
* bindings
#+begin_src elisp
(map!
 "C-x b" #'bufler-switch-buffer

 (:map dired-mode-map
  :n (kbd "DEL") #'dired-up-directory
  :n "K" #'dired-do-kill-lines)

 (:map image-mode-map
   :n "q" #'kill-current-buffer))
#+end_src
* exwm bindings
#+begin_src elisp :results value pp :wrap src elisp
(-map (lambda (el) (cons (key-description (car el)) (cdr el)))
      exwm-input-global-keys)
#+end_src

#+RESULTS:
#+begin_src elisp
(("s-1" lambda nil
  (interactive)
  (exwm-workspace-switch 0))
 ("s-2" lambda nil
  (interactive)
  (exwm-workspace-switch 1))
 ("s-3" lambda nil
  (interactive)
  (exwm-workspace-switch 2))
 ("s-4" lambda nil
  (interactive)
  (exwm-workspace-switch 3))
 ("s-5" lambda nil
  (interactive)
  (exwm-workspace-switch 4))
 ("s-6" lambda nil
  (interactive)
  (exwm-workspace-switch 5))
 ("s-7" lambda nil
  (interactive)
  (exwm-workspace-switch 6))
 ("s-8" lambda nil
  (interactive)
  (exwm-workspace-switch 7))
 ("<XF86AudioPlay>" . emms-pause)
 ("<XF86AudioNext>" . emms-next)
 ("<XF86AudioPrev>" . emms-previous)
 ("s-f" . exwm-layout-toggle-fullscreen)
 ("s-<tab>" . exwm-jump-to-last-exwm)
 ("s-w" . exwm-workspace-switch)
 ("s-r" . app-launcher-run-app)
 ("s-c" . kill-buffer-and-window)
 ("s-u" . winner-undo)
 ("S-s-U" . winner-redo)
 ("s-b" . bufler-switch-buffer)
 ("s-g" . linkmarks-select)
 ("s-h" . evil-window-left)
 ("s-j" . evil-window-down)
 ("s-k" . evil-window-up)
 ("s-l" . evil-window-right)
 ("s-H" . evil-window-move-far-left)
 ("s-J" . evil-window-move-very-bottom)
 ("s-K" . evil-window-move-very-top)
 ("s-L" . evil-window-move-far-right)
 ("M-s-h" . shrink-window-horizontally)
 ("M-s-j" . shrink-window)
 ("M-s-k" . enlarge-window)
 ("M-s-l" . enlarge-window-horizontally)
 ("s-e" lambda nil
  (interactive)
  (sarg/run-or-raise "qutebrowser" "qutebrowser" "--qt-arg" "no-sandbox" "true")
  (exwm-workspace-switch
   (exwm-workspace-name-to-index "brow")))
 ("s-<return>" . +eshell/here)
 ("S-s-<return>" . +vterm/here)
 ("s-<f12>" lambda nil
  (interactive)
  (start-process "flameshot" nil "flameshot" "gui"))
 ("s-<delete>" lambda nil
  (interactive)
  (start-process "lock" nil "lock.sh"))
 ("<XF86AudioRaiseVolume>" . pulseaudio-control-increase-sink-volume)
 ("<XF86AudioLowerVolume>" . pulseaudio-control-decrease-sink-volume)
 ("<XF86AudioMute>" . pulseaudio-control-toggle-current-sink-mute)
 ("<XF86AudioMicMute>" . pulseaudio-control-toggle-current-source-mute)
 ("<XF86MonBrightnessUp>" . backlight)
 ("<XF86MonBrightnessDown>" . backlight))
#+end_src
