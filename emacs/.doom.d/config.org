#+OPTIONS: num:nil
#+SETUPFILE: ~/devel/ext/org-html-themes/org/theme-readtheorg-local.setup
#+PROPERTY: header-args:scheme :tangle no :exports none :noweb-ref guix-pkg
#+begin_src elisp :exports none
;; -*- lexical-binding: t; -*-
;; generated from config.org
#+end_src
#+begin_src elisp :tangle packages.el :exports none
;; generated from config.org
#+end_src
* guix
To define guix dependencies add a =scheme= source code block. It'll be then tangled to =~/.dotfiles/guix/emacs-packages.scm= and merged with the main =home-environment=.

#+begin_src scheme :noweb yes :noweb-ref nil :tangle ~/.dotfiles/guix/emacs-home.scm
;; generated from config.org
(use-modules
 (gnu packages)
 (gnu home))
(home-environment
 (services (list
            <<guix-srv>>))
 (packages
  (map (compose list specification->package+output)
       '(
         <<guix-pkg>>))))
#+end_src
* guix-emacs helper
#+begin_src elisp
(defun use-guix-package (pkg-name)
  (interactive "Package:")

  (let* ((pkg-path
          (thread-last
            pkg-name
            (format "(guix-command-output %S %S)" "build")
            (guix-eval-read)
            (s-trim)))

         (lisp-dir (car (directory-files
                         (concat pkg-path "/share/emacs/site-lisp")
                         'full (rx (not ?.))))))

    (pushnew! load-path lisp-dir)
    (require (intern (substring pkg-name 6)))))

(defun guix-package-info-insert-emacs-install (entry)
  "Insert install button for ENTRY if it is an emacs package."
  (when-let* ((full-name (bui-entry-value entry 'name))
              (is-emacs (string-prefix-p "emacs-" full-name)))
    (bui-format-insert "Use in current session ")
    (bui-insert-action-button
     "Use"
     (lambda (btn)
       (use-guix-package (button-get btn 'package-name)))
     "Use it without installing"
     'package-name full-name)
    (bui-newline)))

(after! guix-ui-package
  (add-to-list 'guix-package-info-format
               'guix-package-info-insert-emacs-install
               'append))
#+end_src
* guix development
#+begin_src scheme
"emacs-debbugs" "gnu-standards" "mumi-with-jaro" "emacs-guix"
#+end_src
#+begin_src elisp
(after! debbugs
  (set-popup-rule! "^\\*Guix-Patches Bugs\\*$" :ignore t)
  (set-popup-rule! "^\\*Summary nndoc" :ignore t)
  (set-popup-rule! "^\\*Article" :ignore t))

(after! guix
  (setq guix-repl-use-server nil))
#+end_src
* doom
** base packages
#+begin_src scheme
"emacs-next"
"emacs-telega" "emacs-telega-contrib"
"emacs-vterm"
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(simple-service 'doom-vars home-environment-variables-service-type
  `(("DOOMLOCALDIR" . "$HOME/.local/doom/")
    ("DOOMDIR" . "$HOME/.dotfiles/emacs/.doom.d/")
    ("VISUAL" . "emacsclient")
    ("EDITOR" . "emacsclient")))
(simple-service 'doom home-files-service-type
  `((".local/bin/doomemacs"
     ,((@ (personal services utils) chmod-computed-file)
       (mixed-text-file "doomemacs" "emacs --init-directory=" (specification->package "doomemacs") " $@")
       #o555))))
#+end_src
** init.el
#+begin_src elisp :tangle init.el
;; generated from config.org
(setq doom-leader-key "<f13>"
      doom-leader-alt-key "<f13>")
(doom!
 :completion  corfu vertico ;(ivy +fuzzy +prescient +childframe)
 :ui          nav-flash (modeline +light) ophints (popup +all +defaults) ligatures
              (vc-gutter +pretty) treemacs
 :editor      (evil +everywhere) fold lispy snippets (format +onsave) multiple-cursors word-wrap
 :emacs       dired electric vc ibuffer undo
 :term        eshell vterm
 :tools       editorconfig (eval +overlay) (lookup +docsets) magit pdf (pass +auth) direnv make tree-sitter lsp
 :checkers    syntax
 :lang        clojure data emacs-lisp
              (org +contacts +dragndrop +pandoc +present +hugo +roam2) beancount
              rest sh plantuml (python +pyenv +lsp) (web +html) yaml json
 :app         calendar telega (rss +org) torrent irc (exwm +bar) emms
 :email       (mu4e +gmail)
 :config      (default +bindings +smartparens) literate)
#+end_src
** font fix
Dunno, but doom resets the fontspec. Let me fix it here.
#+begin_src elisp
(add-hook! after-setting-font :append
  (set-fontset-font t 'unicode "Noto Color Emoji" nil 'append)) ; ðŸ’ªðŸ•¹
#+end_src
** modeline
#+begin_src elisp
(setq! +modeline-encoding nil
       +modeline-height 20)

(def-modeline! :main
  '(" " +modeline-buffer-identification) `(""))
(set-modeline! :main 'default)

(def-modeline! 'project
  `(" " (:eval (abbreviate-file-name default-directory))) '(""))
#+end_src
* exwm
EXWM has a separate [[../.doom.d/modules/app/exwm][doom app]]. Here are just the settings.
#+begin_src scheme
"emacs-exwm"
"emacs-exwm-ss"
#+end_src
#+begin_src elisp :noweb yes
(after! exwm
  <<exwm>>)
#+end_src
** bar
#+begin_src elisp
(setq battery-mode-line-format "%b%>2p%"
      battery-mode-line-limit 50)
(display-battery-mode 1)

(setq exwm/bar-mode-line-format '(""
                    (-2 (:eval (exwm/bar-input-layout-segment))) " "
                    battery-mode-line-string " "
                    (:eval (format-time-string "%a %d %R"))))
#+end_src
** workspaces
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-workspace-names '("code" "brow" "extr" "lisp"))
#+end_src
** per-app settings
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-manage-configurations
      `(((-any? (lambda (el) (equal exwm-class-name el))
          '("mpv" "scrcpy" "AusweisApp2"))
         floating t
         floating-mode-line nil)
        ((equal exwm-class-name "Spotify")
         dont-steal-focus t)
        ((equal exwm-class-name "qutebrowser")
         workspace ,(exwm-workspace-name-to-index "brow"))))
#+end_src
** bindings
*** simulation
When this key event occurs, replace it with another.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-simulation-keys
      `((,(kbd "C-m") . return)
        (,(kbd "DEL") . backspace)

        ; key h in ru layout
        (,(kbd "C-Ñ€") . backspace)))
#+end_src
*** floating
As I've remapped =LWIN= to =F13=, I've lost the floating window resize/move bindings.
Let's restore them with =Ctrl= instead of =Super=.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-resize-event 'C-down-mouse-3
      exwm-input-move-event 'C-down-mouse-1)
#+end_src
*** prefix
These are not full bindings, but the first keys in some sequence. Tell EXWM to
send these events to emacs.
#+begin_src elisp :noweb-ref exwm :tangle no
(setq exwm-input-prefix-keys
      `([f13]
        ?\C-w ?\C-x ?\M-x ?\M-m ?\C-g
        ?\C-m ?\C-h

        ;; cyrillic
        ?\C-Ñ€))
#+end_src
*** x11-only
These are bound only for X11 apps.
#+begin_src elisp :noweb-ref exwm :tangle no
(define-key! exwm-mode-map
  ;; consistent layout switch binding
  [?\C-\\] 'exwm-xkb-next-layout

  ;; this undoes exwm-input-prefix-keys for the next keypress
  [?\C-q] 'exwm-input-send-next-key

  ;; remove the default EXWM bindings
  [?\C-c] 'nil)
#+end_src
#+begin_src elisp :noweb-ref exwm :tangle no
(add-hook! 'exwm-input-input-mode-change-hook
  (defun exwm/enable-xkb-layout-switch ()
    (start-process "keymap.sh" nil "keymap.sh"
                   (if (eq exwm--input-mode 'char-mode) "enable" "disable"))))
#+end_src
*** global
#+begin_src elisp :noweb-ref exwm :tangle no
(defun exwm/switch-to-next-buffer (class &optional reverse?)
  "Form a cycle of CLASS buffers and return the one next to current buffer.
REVERSE? it when true. Returns the selected buffer."
  (cl-loop
    with first with this with next
    for b in (if reverse? (reverse (buffer-list)) (buffer-list))
    when (string= class (buffer-local-value 'exwm-class-name b)) do
      (setf first (or first b))
      (setf next (and this b))
      (setf this (or this (when (eq (current-buffer) b) b)))
    until next
    finally return
    (and (or next first)
         (switch-to-buffer (or next first) t t))))

; disable <f13> h (help-map) conflicting with window movements
(map! :leader "h" nil)

(exwm/bind-command
 "<f13> r"     #'app-launcher-run-app

 "<f13> h"     #'evil-window-left
 "<f13> j"     #'evil-window-down
 "<f13> k"     #'evil-window-up
 "<f13> l"     #'evil-window-right

 "<f13> E"    `(lambda () (interactive)
                 (exwm-workspace-switch (exwm-workspace-name-to-index "brow"))
                 (cond
                  ((string= "qutebrowser" exwm-class-name)
                   (exwm/switch-to-next-buffer "qutebrowser" 'reverse))

                  ((not (get-process "qutebrowser"))
                   (start-process "qutebrowser" nil "setsid" "-w" "qutebrowser"))))

 "<f13> e"    `(lambda () (interactive)
                 (exwm-workspace-switch (exwm-workspace-name-to-index "brow"))
                 (or (exwm/switch-to-next-buffer "qutebrowser")
                     (start-process "qutebrowser" nil "setsid" "-w" "qutebrowser"))))
#+end_src
** app launcher
#+begin_src scheme
"dex"
#+end_src
#+begin_src elisp
;; the default one messes up exec path of wine programs due to wrong parsing
(after! app-launcher
  (defun app-launcher--action-dex (selected)
    (call-process "dex" nil nil nil (cdr (assq 'file (gethash selected app-launcher--cache)))))

  (advice-add 'app-launcher-list-desktop-files :filter-return
              (lambda (apps)
                (let ((keep '("lutris" "libreoffice-startcenter" "flatseal" "spotify"))
                      (del '("flatpak" "emacs" "qview" "scrcpy" "qutebrowser"
                             "libreoffice" "mpv" "quake3" "picom" "flameshot")))
                  (seq-filter (lambda (el)
                                (or
                                 (-any? (lambda (i) (s-contains? i (cdr el) t)) keep)
                                 (-none? (lambda (i) (s-contains? i (cdr el) t)) del)))
                              apps))))

  (setq app-launcher--action-function #'app-launcher--action-dex))
#+end_src
* theme
#+begin_src scheme
"emacs-catppuccin-theme"
#+end_src
#+begin_src elisp :tangle packages.el :exports none
(package! greymatters-theme :pin "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1")
(package! catppuccin-theme :built-in t)
#+end_src

#+begin_src elisp
(use-package! greymatters-theme)
(use-package! catppuccin-theme)
(defvar doom-theme-dark 'catppuccin)
(setq doom-theme 'greymatters
      doom-font (font-spec :family "Hack" :size 18)
      doom-serif-font (font-spec :family "Hack")
      doom-symbol-font (font-spec :family "Hack"))
#+end_src

[[*dark mode][see: dark mode]]

* desktop
** desktop entries
#+begin_src scheme
"jaro"
#+end_src
#+begin_src scheme :tangle ~/.config/associations :noweb-ref nil
(assoc
 #:pattern '("^mailto:.*")
 #:program '("emacsclient" "--eval" "(message-mailto \"%f\")"))

(assoc
 #:pattern '("^https://t.me/.*")
 #:program '("emacsclient" "--eval" "(telega-browse-url \"%f\")"))

(assoc
 #:pattern '("^org-protocol:.*")
 #:program '("emacsclient" "%f"))

(assoc
 #:pattern '("(application|text)/(x-)?(pdf|postscript|ps|epub.*)" "image/(x-)?eps" "image/vnd.djvu")
 #:program '("zathura" "%f"))

(assoc
 #:pattern '("^video/.*")
 #:program '("mpv" "%f"))

(assoc
 #:pattern '("^image/.*")
 #:program '("qview" "%f"))
#+end_src
** multimedia keys
#+begin_src elisp :noweb-ref exwm :tangle no
(exwm/bind-command
   "<XF86MonBrightnessUp>" "brightnessctl -e set 10%+"
   "<XF86MonBrightnessDown>" "brightnessctl -e set 10%-"
   "<XF86ScreenSaver>" "lock.sh"
   "<f13> <f12>" "flameshot gui")
#+end_src
** dark mode
#+begin_src scheme
"emacs-circadian"
#+end_src
#+begin_src elisp :tangle packages.el :exports none
(package! circadian :built-in t)
(package! solar :built-in t)
#+end_src
#+begin_src elisp
;; Change color theme based on day time
(use-package! solar
  :custom
  (calendar-latitude 52.516667)
  (calendar-longitude 13.388889))

(use-package! circadian
  :custom
  (circadian-themes
   `((:sunrise . ,doom-theme)
     (:sunset . ,doom-theme-dark)))
  :config
  (circadian-setup))

(defvar sarg-redshift-timer 'nil
  "Stores redshift-adjust timer")

(defun sarg/redshift-adjust ()
  (interactive)
  (start-process-shell-command
   "redshift" nil
   (format "redshift -m randr -Po -l %f:%f" calendar-latitude calendar-longitude)))

(defun sarg/redshift-start ()
  (interactive)
  (unless sarg-redshift-timer
    (setq sarg-redshift-timer (run-at-time nil 60 #'sarg/redshift-adjust))))

(defun sarg/redshift-cancel ()
  (interactive)
  (when sarg-redshift-timer (cancel-timer sarg-redshift-timer))
  (start-process-shell-command "redshift" nil "redshift -x"))

(add-hook! exwm-init #'sarg/redshift-start)
#+end_src
** wpa-manager
#+begin_src elisp :tangle packages.el :exports none
(package! wpa-manager
  :recipe (:host github :repo "sarg/wpa-manager.el")
  :pin "5bb92e5b6acb2128604e65961d27863d1947bc4e")
#+end_src

#+begin_src elisp
(use-package! wpa-manager
  :init
  (after! evil-collection
    (evil-collection-inhibit-insert-state 'wpa-manager-mode-map)
    (evil-set-initial-state 'wpa-manager-mode-map 'normal)
    (evil-collection-define-key 'normal 'wpa-manager-mode-map
      "s" 'wpa-manager-scan
      "r" 'revert-buffer
      "c" 'wpa-manager-connect
      "d" 'wpa-manager-delete-network
      (kbd "RET") 'wpa-manager-connect)))
#+end_src
** bluetooth
#+begin_src scheme
"emacs-bluetooth"
#+end_src
#+begin_src elisp :tangle packages.el
(package! bluetooth :built-in t)
#+end_src
#+begin_src elisp
(use-package! bluetooth)
#+end_src
** udisks
#+begin_src scheme
"emacs-discomfort"
#+end_src
#+begin_src elisp :tangle packages.el
(package! discomfort :built-in t)
#+end_src
#+begin_src elisp
(use-package! discomfort
  :config
  (add-to-list 'evil-emacs-state-modes 'discomfort-mode)
  (define-key! discomfort-mode-map
    "j" #'next-line
    "k" #'previous-line))
#+end_src
* gpg
#+begin_src scheme
"emacs-pinentry" "gnupg"
#+end_src
#+begin_src scheme :noweb-ref guix-srv
(service home-gpg-agent-service-type
 (home-gpg-agent-configuration
  (pinentry-program
   (file-append pinentry-emacs "/bin/pinentry-emacs"))
  (ssh-support? #t)
  (default-cache-ttl 86400)
  (max-cache-ttl 86400)))
#+end_src
#+begin_src elisp :tangle packages.el
(package! pinentry :built-in t)
#+end_src
#+begin_src elisp
(use-package! pinentry
  :config
  (pinentry-start))
#+end_src
* emacs screencast recording
#+begin_src elisp :tangle packages.el
(package! command-log-mode :pin "af600e6b4129c8115f464af576505ea8e789db27")
;(package! keycast)
;(package! camcorder) autoloads fail because of names.el usage. todo: debug
#+end_src

#+begin_src elisp
(use-package! command-log-mode
  :commands command-log-mode)
;; (use-package! camcorder
;;   :commands camcorder-mode
;;   :hook (camcorder-mode-hook . clm/command-log-clear))
#+end_src

#+begin_src scheme
"recordmydesktop"
#+end_src
* miscellaneous
#+begin_src elisp
;; C-h deletes character backwards
(define-key key-translation-map [?\C-h] [?\C-?])

(setq-default
 ;; russian layout on C-\
 default-input-method "russian-computer")
#+end_src

** Debug icons in modeline, find out their names. :noexport:
#+begin_src elisp :tangle no
(defadvice! +debug-modeline-format-icon (icon-set icon label &optional face &rest args)
  :override +modeline-format-icon
  (propertize (format "X %s" label) 'face face))
#+end_src
* buffers
#+begin_src elisp :tangle packages.el :exports none
(package! map :built-in 't) ; macro-expansion fails on the latest map.el, use the older built-in
(package! bufler :pin "ef3b28bbdcb1e813a1d5b06a91d09774998967c5")
#+end_src

#+begin_src elisp
(use-package! bufler
  :init
  (set-popup-rule! "^\\*Bufler\\*$" :ignore t)

  :config
  (after! exwm
    (exwm-input-set-key (kbd "s-b") #'bufler-switch-buffer))

  (after! evil-collection
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "C-k") 'bufler-list-buffer-kill
      "r" 'bufler
      (kbd "RET") 'bufler-list-buffer-switch))

  :custom
  (bufler-groups
   (bufler-defgroups
     (group (mode-match "Telega" (rx bos "telega-chat")))
     (group
      (group-and "X11" (mode-match "exwm-mode" (rx bos "exwm-mode")))
      (group-and "WWW"
       (lambda (b) (string= "qutebrowser" (buffer-local-value 'exwm-class-name b)))))
     (group (auto-project))
     (auto-directory))))
#+end_src
* org mode
#+begin_src elisp :tangle packages.el
(package! org-modern-indent
    :recipe (:host github :repo "jdtsmith/org-modern-indent")
    :pin "f2b859bc53107b2a1027b76dbf4aaebf14c03433")
(package! corg
  :recipe (:host github :repo "isamert/corg.el")
  :pin "16d2b80fb2ff4daf0ab9bf89e5c9f649431337fc")
(package! org-modern :built-in t)
(package! org-tidy :pin "26d9636f0c43f1ee3f0528880111a4c1dd2bed32")
#+end_src
#+begin_src scheme
"emacs-org-modern"
"font-iosevka-curly" ; for org-modern bullets
#+end_src

#+begin_src elisp
(setq
 org-directory (expand-file-name "~/Sync/org/")
 org-refile-targets `((nil :maxlevel . 3)
                      (,(expand-file-name "bookmarks.org" org-directory) :level . 1)
                      (org-agenda-files :maxlevel . 3))

 org-src-window-setup 'current-window
 org-fold-catch-invisible-edits 'show-and-error)

(use-package corg
  :hook (org-mode . corg-setup))

(use-package org-tidy
  :disabled
  :hook (org-mode . org-tidy-mode))

(use-package! org-contacts
  :custom
  (org-contacts-files (list (expand-file-name "contacts.org" org-directory))))

(use-package! org-modern
  :hook ((org-mode org-agenda-finalize) . org-modern-mode))

(use-package! org-modern-indent
  :hook (org-mode . org-modern-indent-mode))

(after! org-download
  (setq org-download-screenshot-method "flameshot gui --raw > %s"))

(load! "org-defuns")
#+end_src
** capture :noexport:
#+begin_src python :tangle ~/.local/share/qutebrowser/userscripts/orgprotocol :shebang #!/usr/bin/env python3
import os
from urllib.parse import quote
os.execlp('xdg-open', 'xdg-open',
          'org-protocol://capture?template=b&url={url}&title={title}&body={body}'.format(
              url   = quote(os.environ.get('QUTE_URL', '')),
              title = quote(os.environ.get('QUTE_TITLE', '')),
              body  = quote(os.environ.get('QUTE_SELECTED_TEXT', ''))))
#+end_src
#+begin_src elisp
(pushnew! org-capture-templates
          '("b" "Bookmark URL" entry
            (file+headline +org-capture-todo-file "Inbox")
            "* %?%a\n%i" :prepend t))
#+end_src
** agenda
#+begin_src elisp :tangle packages.el :exports none
(package! german-holidays :pin "a8462dffccaf2b665f2032e646b5370e993a386a")
#+end_src

#+begin_src elisp
(use-package! german-holidays
  :custom
  (calendar-holidays holiday-german-BE-holidays))

(setq
 org-agenda-files
 (-map (lambda (el) (expand-file-name el org-directory))
       '("projects.org"
         "tickler.org")))
#+end_src

** roam
#+begin_src elisp
(after! org-roam
  (setq org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags))))))
#+end_src
** elasticsearch :noexport:
#+begin_src elisp :tangle no
(package! es-mode :pin "e82465fd785688bb58918ea62ca4de06a2a23a1e")
#+end_src

#+begin_src elisp :tangle no
(use-package! es-mode
  :commands (org-babel-execute:es)

  :config
  (appendq!
   +org-babel-mode-alist '((es . elasticsearch))))
#+end_src
* git
#+begin_src elisp :tangle packages.el
(package! magit-todos :disable t) ; too slow
#+end_src

#+begin_src elisp
(after! magit
  (let ((sarg-repos-dir (expand-file-name "~/devel/")))
    (setq magit-repository-directories `((,sarg-repos-dir . 2))
          magit-clone-default-directory `,sarg-repos-dir)))

(after! browse-at-remote
  (setq browse-at-remote-prefer-symbolic nil))
#+end_src
* tramp
#+begin_src elisp
(after! tramp
  (pushnew! tramp-remote-path 'tramp-own-remote-path))
#+end_src
* book reading
#+begin_src elisp
(use-package! zathura-sync-theme
  :config
  (zathura-sync-theme-mode))
#+end_src
#+begin_src text :tangle ~/.config/zathura/zathurarc
set guioptions ""
set statusbar-basename true
include theme
#+end_src
#+begin_src elisp :tangle packages.el
(package! calibredb :built-in t)
(package! nov :built-in t)
(package! zathura-sync-theme
  :recipe (:host github :repo "sarg/zathura-sync-theme")
  :pin "c0e6169e76fe6b7a92fd7acda2c27d0209e7d5a6")
#+end_src

#+begin_src scheme
"emacs-calibredb" "sqlite" "emacs-nov-el" "emacs-pdf-tools"
#+end_src

#+begin_src elisp :tangle no
(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)

  :custom
  (nov-variable-pitch nil)
  (nov-text-width t))
#+end_src

#+begin_src elisp
(use-package! calibredb
  :commands calibredb

  :custom
  (calibredb-root-dir (alist-get 'library_path (json-read-file "~/.config/calibre/global.py.json")))
  (calibredb-preferred-format 'epub) ;; just open it, don't ask

  ;; hide extra columns
  (calibredb-date-width 0)
  (calibredb-format-width 0)
  (calibredb-title-width 80)
  (calibredb-tag-width -1)
  (calibredb-comment-width 0)

  :config
  (defalias 'calibredb-open-with-default-tool #'find-file))
#+end_src

* password-store
#+begin_src elisp :tangle packages.el :exports none
(package! password-generator :built-in t)
(package! password-store :built-in t)
(package! password-store-otp :built-in t)
#+end_src
#+begin_src scheme
"password-store"
"pass-otp"
"emacs-password-generator"
"emacs-password-store"
"emacs-password-store-otp"
#+end_src

#+begin_src elisp
(after! embark
  (defvar-keymap embark-pass-actions
    :doc "Keymap for actions for pass entries."
    :parent embark-general-map
    "f" #'password-store-copy-field
    "b" #'password-store-url
    "o" #'password-store-otp-token-copy
    "e" #'password-store-edit
    "g" #'password-store-generate
    "r" #'password-store-rename
    "d" #'password-store-remove)


  (add-to-list 'embark-keymap-alist '(pass . embark-pass-actions)))
#+end_src

#+begin_src elisp
(setq password-cache-expiry (* 60 15))

;; for magithub auth to work create pass entry user^magithub@api.github.com
(after! magit
    (setq magit-process-find-password-functions '(magit-process-password-auth-source)))

(use-package! password-generator
  :after password-store

  :config
  (defadvice! +password-store-edit-locally (entry)
    :override #'password-store-edit
    (interactive (list (password-store--completing-read t)))
    (find-file (password-store--entry-to-file entry)))

  (defadvice! +password-store-generate-strong (entry &optional len)
    :override #'password-store-generate
    (interactive (list (password-store--completing-read)
                       (when current-prefix-arg
                         (abs (prefix-numeric-value current-prefix-arg)))))
    (let ((pass
           (password-generator-strong
            (or len password-store-password-length) t)))
      (password-store-insert entry pass))))
#+end_src

** qutebrowser integration
#+begin_src elisp
(defun qute/choose-pass (url)
   (completing-read "Pass: " (password-store-list) nil t url))
#+end_src

#+NAME: password_fill_rc
#+begin_src bash :tangle ~/.config/qutebrowser/password_fill_rc
choose_entry() {
    MENU_COMMAND=( emacs-dmenu -p pass )
    choose_entry_menu || true
    #file=$( emacsclient -e '(qute/choose-pass "'$simple_url'" )' | jq -r . ) || true
}
#+end_src

* music
** emms
#+begin_src scheme
"emacs-emms"
#+end_src
#+begin_src elisp :tangle packages.el
(package! emms :built-in 't)
#+end_src
#+begin_src elisp
(defun dont-kill-buffer--hook ()
  (bury-buffer)
  (user-error "Don' kill me."))

(define-minor-mode dont-kill-buffer-mode
  "Don't kill buffer, just bury it."
  :global nil

  (if dont-kill-buffer-mode
      (add-hook 'kill-buffer-hook #'dont-kill-buffer--hook 0 t)
    (remove-hook 'kill-buffer-hook #'dont-kill-buffer--hook t)))

(defun =emms ()
  (interactive)
  (cl-letf (((symbol-function 'switch-to-buffer) #'display-buffer))
    (if (or (null emms-playlist-buffer)
            (not (buffer-live-p emms-playlist-buffer)))
        (call-interactively 'emms-add-playlist))
    (emms)))

(after! emms
  (setq
   emms-player-mpv-update-metadata t
   emms-playlist-buffer-name "*Music*"
   emms-source-file-default-directory (expand-file-name "~/Sync/"))

  (map! :map emms-playlist-mode-map
        :localleader
        "r" #'emms-toggle-random-playlist)

  (when (modulep! :app emms +history)
    (add-hook! emms-playlist-mode #'dont-kill-buffer-mode)
    (setq emms-history-file "/storage/data/emacs/emms_history")
    (emms-history-load))

  (setq emms-player-list (list emms-player-mpv)))
#+end_src
*** playlist buffer
#+begin_src elisp
(after! emms
  (defun emms/modeline-status-icon ()
    (cl-destructuring-bind (text . icon)
        (cond
         ((and emms-player-playing-p emms-player-paused-p)
          '("Paused" . "pause-circle"))
         ((and emms-player-playing-p (emms-player-get 'emms-player-spotify 'ad-blocked))
          '("Advert" . "usd"))
         (emms-player-playing-p
          '("Playing" . "play-circle"))
         (t '("Stopped" . "stop-circle")))
      (propertize (cdr (assoc icon (all-the-icons-faicon-data)))
                  'face '(:family "FontAwesome")
                  'rear-nonsticky t)))

  (set-popup-rule!
    (lambda (buffer action)
      (buffer-local-value 'emms-playlist-buffer-p (get-buffer buffer)))
    :ttl nil
    :quit 'current
    :select t
    :modeline '(" " (:eval (emms/modeline-status-icon)) emms-mode-line-string emms-playing-time-string)
    :height 15)

  (add-hook!
    (emms-player-paused emms-player-started emms-player-stopped) #'force-mode-line-update)

  ;; don't show mode-line globally, to be shown only in the popup buffer
  (emms-mode-line-mode 1)
  (setq emms-mode-line-mode-line-function #'emms-mode-line-playlist-current)
  (delq 'emms-mode-line-string global-mode-string)
  (delq 'emms-playing-time-string global-mode-string))
#+end_src
*** bindings
#+begin_src elisp :noweb-ref exwm :tangle no
(exwm/bind-command
 "<XF86AudioRaiseVolume>" #'emms-volume-raise
 "<XF86AudioLowerVolume>" #'emms-volume-lower
 "<XF86AudioMute>" "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
 "<XF86AudioMicMute>" "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle")

(after! emms
  (exwm/bind-command
   "<XF86AudioPlay>" #'emms-pause
   "<XF86AudioPrev>" #'emms-previous
   "<XF86AudioNext>" (lambda () (interactive) (if emms-random-playlist (emms-random) (emms-next)))))
#+end_src
** spotify
*** player
#+begin_src elisp :tangle packages.el
(package! emms-player-spotify :pin "b2f2be8222f0852276cccef05ca820982b6ec33a")
#+end_src
#+begin_src elisp
(use-package! emms-player-spotify
  :custom
  (emms-player-spotify-launch-cmd "flatpak run com.spotify.Client")
  (emms-player-spotify-adblock t)

  :config
  (setq emms-player-spotify-debug t)
  (add-to-list 'emms-player-list emms-player-spotify))
#+end_src
*** search
#+begin_src elisp :tangle packages.el
(package! counsel-spotify :pin "2743ad52a9def53534fd505397fbe1ac49e53015")
#+end_src
#+begin_src elisp
(use-package! counsel-spotify
  :defer t
  :custom
  (counsel-spotify-use-notifications nil) ; conflicts with handlers of emms-player-spotify

  :config
  (if (string-empty-p counsel-spotify-client-secret)
      (setq counsel-spotify-client-id (auth-source-pass-get "client-id" "Sites/spotify.com")
            counsel-spotify-client-secret (auth-source-pass-get "client-secret" "Sites/spotify.com")))

  (defun counsel-spotify--utf8 (str)
    (when str
      (decode-coding-string (string-make-unibyte str) 'utf-8)))

  (defun emms-player-spotify-expand-album (id)
    (counsel-spotify-with-auth-token (auth-token)
     (counsel-spotify-with-query-results
      (auth-token (concat counsel-spotify-spotify-api-url "/albums/" id "/tracks") results)

      (with-current-emms-playlist
        (goto-char (point-max))
        (ignore (mapc (lambda (el)
            (let ((track (emms-track 'url (uri el))))
              (emms-track-set track 'info-title
                              (counsel-spotify--utf8 (name el)))
              (emms-track-set track 'info-artist
                              (counsel-spotify--utf8 (name (artist el))))
              (emms-track-set track 'info-album
                              (counsel-spotify--utf8 (name (album el))))
              (emms-track-set track 'info-playing-time (round (* 1e-6 (duration-in-ms el))))
              (emms-playlist-insert-track track)))
          (counsel-spotify-parse-items (list (cons 'tracks results)) 'tracks)))))))

  (cl-defmethod counsel-spotify-do-play ((backend counsel-spotify-linux-backend) (playable counsel-spotify-playable))
    (with-current-emms-playlist
      (goto-char (point-max))
      (cond
       ((counsel-spotify-album-p playable)
        (emms-player-spotify-expand-album
         (nth 2 (string-split (uri playable) ":"))))

       (t
        (let ((track (emms-track 'url (uri playable))))
          (emms-track-set track 'info-artist "Spotify Playlist")
          (emms-track-set track 'info-title (counsel-spotify--utf8 playable))
          (emms-playlist-insert-track track)
          (emms-playlist-mode-play-current-track)))))))
#+end_src
* elfeed
#+begin_src elisp :tangle packages.el
(package! elfeed-goodies :disable t)
#+end_src
#+begin_src elisp
(defun elfeed-open-special ()
  "Open videos directly."
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (if (seq-contains-p (elfeed-entry-tags entry) 'youtube)
        (elfeed-search-browse-url)
      (elfeed-search-show-entry entry))))

(after! elfeed
  (setq elfeed-db-directory "/storage/data/elfeed")
  (add-hook 'elfeed-show-mode-hook (lambda () (setq-local browse-url-generic-program "qutebrowser-background")))

  (setq elfeed-search-filter "@2-week-ago +unread -youtube"
        elfeed-show-entry-switch #'display-buffer)

  (evil-define-key 'normal elfeed-search-mode-map
    (kbd "RET") 'elfeed-open-special))
#+end_src

#+begin_src sh :tangle ~/.local/bin/qutebrowser-background :shebang #!/bin/sh :exports none
qutebrowser --nowindow --target tab-bg-silent $@
#+end_src

* dict
#+begin_src scheme
"emacs-lexic" "sdcv" "emacs-google-translate"
#+end_src
#+begin_src elisp :tangle packages.el
(package! lexic :built-in t)
(package! dictcc :pin "30b505759e5a97c2aaa8b0e8ea5e187fdf625c65")
(package! powerthesaurus :pin "4b97797cf789aaba411c61a85fe23474ebc5bedc")
#+end_src
#+begin_src elisp
(defun lexic-format-shr (entry &optional _expected-word)
  (with-temp-buffer
    (insert (plist-get entry :info))
    (let ((tree (libxml-parse-html-region)))
      (erase-buffer)
      (shr-insert-document tree))
    (buffer-string)))

(use-package! lexic
  :config
  (add-to-list 'evil-emacs-state-modes 'lexic-mode)
  (setq lexic-dictionary-specs
        '(("Duden - Das groÃŸe WÃ¶rterbuch der deutschen Sprache"
           :short "Duden" :formatter lexic-format-shr :priority 0))))
#+end_src
* email
#+begin_src scheme
"mu" "isync" "msmtp"
#+end_src
#+begin_src elisp :tangle packages.el
(package! mu4e-alert :disable t)
#+end_src
#+begin_src elisp
(use-package! mu4e-alert
  :disabled
  :custom
  (mu4e-alert-interesting-mail-query mu4e-filter-inbox))

(after! mu4e
  (set-popup-rule! "^\\*mu4e-main\\*$" :ignore t)
  (set-popup-rule! "^\\*mu4e-headers\\*$" :ignore t)
  (setq mu4e-filter-inbox "flag:unread AND NOT flag:trashed AND maildir:/gmail/all"
        mu4e-bookmarks `((,mu4e-filter-inbox "Gmail messages" ?u)
                         ("date:today..now AND NOT flag:trashed AND NOT maildir:/gmail/trash" "Today's messages" 116))
        mu4e-modeline-support nil)

  (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . 8bit)))

(set-email-account! "sarg"
  '((mu4e-sent-folder   . "/gmail/sent")
    (mu4e-drafts-folder . "/gmail/drafts")
    (mu4e-trash-folder  . "/gmail/trash")
    (mu4e-refile-folder . "/gmail/all")
    (smtpmail-smtp-user . "sarg@sarg.org.ru")
    (smtpmail-smtp-server . "smtp.gmail.com")
    (smtpmail-servers-requiring-authorization . "smtp\\.gmail\\.com")
    (smtpmail-smtp-service . 587)
    (smtpmail-stream-type . starttls)
    (send-mail-function . smtpmail-send-it)
    (message-send-mail-function . smtpmail-send-it)
    (user-mail-address  . "sarg@sarg.org.ru"))
  t)
#+end_src
* browsing
#+begin_src elisp :tangle packages.el
(package! webpaste :built-in t)
(package! web-search :pin "a22cbdc663a1895d5a5b69de91e1e3b9eb64b92f")
(package! mpv :built-in t)
(package! yeetube :built-in t)
#+end_src
#+begin_src scheme
"emacs-mpv" "emacs-webpaste" "emacs-yeetube"
#+END_src
#+begin_src elisp
(defun browse-url-qute-private (url &rest _)
  "Make qutebrowser open URL in private-browsing window."
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((process-environment (browse-url-process-environment)))
    (start-process "qutebrowser-private" nil
           "qutebrowser" "--target" "private-window" url)))

(use-package! mpv
  :commands mpv-play-url
  :custom
  (mpv-default-options '("--force-window=immediate")))

(defun browse-url-mpv (url &rest _)
  (mpv-play-url url))

(defun browse-url-emms (url &rest _)
  (emms-add-url url))

(setq browse-url-handlers
      `((,(rx string-start "https://" (opt "www.") "youtu" (opt ".") "be") . browse-url-mpv)
        ("https://t.me/" . telega-browse-url)
        ("open.spotify.com" . browse-url-emms)))

(setq-default
 browse-url-browser-function 'browse-url-generic
 browse-url-generic-program "qutebrowser")

(use-package! web-search
  :commands web-search
  :custom
  (web-search-default-provider "DuckDuckGo"))
#+end_src
* shell
#+begin_src elisp :tangle packages.el
(package! eat :built-in t)
(package! detached :built-in t)
#+end_src

#+begin_src scheme
"emacs-eat" "emacs-detached"
#+end_src

#+begin_src scheme :noweb-ref guix-srv
(simple-service 'eat-bash-integration home-bash-service-type
 (home-bash-extension
  (bashrc (list
           (plain-file "eat"
            "[ -n \"$EAT_SHELL_INTEGRATION_DIR\" ] && source \"$EAT_SHELL_INTEGRATION_DIR/bash\"")))))
#+end_src

#+begin_src elisp
; presumably speeds up I/O
; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44007
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 4 1024 1024))

(after! eshell
  (add-hook 'eshell-first-time-mode-hook
            (lambda ()
              (map! :map eshell-mode-map
                    :ni "C-r" #'+eshell/search-history))))

(use-package! eat
  :hook ((eshell-load . eat-eshell-mode)
         (eshell-load . eat-eshell-visual-command-mode)))

(use-package! detached
  :init
  (detached-init)
  :bind (;; Replace `async-shell-command' with `detached-shell-command'
         ([remap async-shell-command] . detached-shell-command)
         ;; Replace `compile' with `detached-compile'
         ([remap compile] . detached-compile)
         ([remap recompile] . detached-compile-recompile)
         ;; Replace built in completion of sessions with `consult'
         ([remap detached-open-session] . detached-consult-session))
  :custom ((detached-show-output-on-attach t)
           (detached-terminal-data-command system-type)))
#+end_src

* dired
#+begin_src elisp :tangle packages.el
(package! dired-filter :built-in t)
(package! dired-du :built-in t)
(package! dired-collapse :pin "e9e408e8571aee5574ca0a431ef15cac5a3585d4")
(package! dired-git-info
  :recipe (:host github :repo "clemera/dired-git-info")
  :built-in t)
(package! openwith :built-in t)
(package! sxiv :built-in t)
#+end_src

#+begin_src scheme
"emacs-dired-hacks" "emacs-dired-du"
"emacs-dired-git-info" "emacs-openwith" "emacs-sxiv"
#+end_src

#+begin_src elisp
(use-package! dired-filter
  :hook (dired-mode . dired-filter-mode)
  :custom
  (dired-filter-stack '((omit) (dot-files)))
  (dired-filter-revert 'always))

(use-package! dired-collapse
  :hook (dired-mode . dired-collapse-mode))

(use-package! dired-git-info
  :custom
  (dgi-commit-message-format "%cr\t%s"))

(use-package! sxiv)
(use-package! dired-du
  :custom
  ;; human readable
  (dired-du-size-format 't))

(add-hook! dired-mode #'dired-hide-details-mode)

(after! async
  (dired-async-mode 1))

(defun openwith-has-association (file)
  (-any? (lambda (oa) (string-match (car oa) file)) openwith-associations))

(use-package! openwith
  :hook (after-init . openwith-mode)
  :custom
  (openwith-associations
   '(("\\.\\(?:pdf\\|epub\\|djvu\\|mkv\\|webm\\|avi\\|mp4\\)\\'" "xdg-open" (file))))

  :config
  ;; Don't ask if file is too large when it'll be handled by openwith-mode.
  (advice-add 'abort-if-file-too-large :before-until
              (lambda (size op-type filename &rest args)
                (and (boundp 'openwith-mode) openwith-mode
                     (openwith-has-association filename)))))
#+end_src

* bindings
#+begin_src elisp
(map!
 "C-x b" #'bufler-switch-buffer

 (:map dired-mode-map
  :n (kbd "DEL") #'dired-up-directory
  :n "K" #'dired-do-kill-lines)

 (:map image-mode-map
  :n "q" #'kill-current-buffer)

 :leader
 :desc "Music" "oM" #'=emms)
#+end_src
* hardware
** scanner
#+begin_src sh :tangle ~/.local/bin/simple-scan :shebang #!/bin/sh
guix shell sane-airscan simple-scan -- sh -c 'LD_LIBRARY_PATH=$GUIX_ENVIRONMENT/lib/sane SANE_CONFIG_DIR=$GUIX_ENVIRONMENT/etc/sane.d simple-scan'
#+end_src
* experimental
** theme-cycle
#+begin_src elisp :tangle packages.el
(package! theme-cycle :recipe (:host github :repo "tsengf/theme-cycle"))
#+end_src
#+begin_src elisp
(use-package! theme-cycle
  :commands cycle-themes)
#+end_src
** bookmark
#+begin_src scheme
"emacs-bookmark-plus"
#+end_src
#+begin_src elisp :tangle packages.el
(package! bookmark+ :built-in t)
#+end_src
#+begin_src elisp
(setq bookmark-default-file "/storage/data/emacs/bookmarks")
(use-package! bookmark+)
#+end_src
** cyclekey
#+begin_src elisp :tangle packages.el
(package! cyclekey :recipe (:host github :repo "shankar2k/cyclekey"))
#+end_src
#+begin_src elisp
(use-package! cyclekey
  :bind ("M-o" . cyclekey-cycle)

  :config
  (cyclekey-add-language "German"))
#+end_src
** magic sqlite
#+begin_src elisp
; https://christiantietze.de/posts/2024/01/emacs-sqlite-mode-open-sqlite-files-automatically/
(use-package sqlite-mode
  :config
  (defun ct/sqlite-view-file-magically ()
    "Runs `sqlite-mode-open-file' on the file name visited by the
current buffer, killing it."
    (require 'sqlite-mode)
    (let ((file-name buffer-file-name))
      (kill-current-buffer)
      (sqlite-mode-open-file file-name)))

  (add-to-list 'magic-mode-alist '("SQLite format 3\x00" . ct/sqlite-view-file-magically)))
#+end_src
** gpx-mode
#+begin_src scheme
;; "emacs-gpx"
"emacs-osm"
#+end_src
#+begin_src elisp
(use-package! osm
  :init
  (set-popup-rule! "^\\*osm" :ignore t)

  :config
  (defun gpx-show-map-osm (file track segment)
    (osm-gpx-show file)))

;; (use-package! gpx
;;   :config
;;   (setq gpx-show-map-function  #'gpx-show-map-osm))
#+end_src
** qute-dired
#+begin_src elisp
(defun qute/choose-file ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-file qute-filename
      (insert (s-join "\n" files)))
    (map! :map dired-mode-map "C-c C-c" nil)
    (+dired/quit-all)))

(defun qute/dired-hook (&optional _)
  (when (s-starts-with? "/tmp/qutebrowser-fileselect" buffer-file-name)
    (setq qute-filename buffer-file-name)
    (dired "~/")
    (map! :map dired-mode-map "C-c C-c" #'qute/choose-file)
    (kill-buffer (find-file-noselect qute-filename))))

(add-hook! 'server-visit-hook #'qute/dired-hook)
#+end_src

** emacs-dmenu
#+begin_src elisp
(cl-defun dmenu/select-line-from-file (file &key prompt lines)
  "completing-read a line from FILE."
  (completing-read (concat (or prompt "Select") ": ")
                   (with-temp-buffer
                     (insert-file-contents file)
                     (string-lines (buffer-string)))
                   nil t))
#+end_src

#+begin_src sh :tangle ~/.local/bin/emacs-dmenu :shebang #!/usr/bin/env bash
usage() {
  echo "Usage: $0 -p prompt -l lines"
  exit 1
}

prompt=nil
lines=nil
while getopts ":p:l:" opt; do
  case $opt in
    p) prompt="\"$OPTARG\""
    ;;
    l) lines="$OPTARG"
    ;;
    ,*) usage
    ;;
  esac
done

if [ "$prompt" == "nil" ] && [ "$lines" == "nil" ]; then
  usage
fi

tmp=$(mktemp); cat > $tmp
emacsclient -e '(dmenu/select-line-from-file "'$tmp'" :prompt '"$prompt"' :lines '$lines')' | jq -r .
#+end_src
** org-node
#+begin_src scheme
"emacs-org-node"
#+end_src
#+begin_src elisp :tangle packages.el
(package! org-node :built-in t)
#+end_src
#+begin_src elisp
(use-package! org-node)
#+end_src

* TODO todo [7/12]
** DONE console font
** DONE mingetty with xorg autostart (under sarg), put `lock.sh` first in the .xsession
** DONE user syncthing
** DONE check if greetd is necessary
** TODO move away from org-contacts
Reqs:
- use [[https://datatracker.ietf.org/doc/html/rfc6350#section-5.4][ALTID]] for names in russian/english
- export contacts with UID to avoid duplication
- group KIND
- embed photo
- nickname
- impp for telega/whatsapp
https://isamert.net/2021/04/21/managing-your-contacts-in-org-mode-and-syncing-them-to-your-phone-android-ios-whatever-.html

** TODO mu4e filtering for guix-patches
** DONE guix gc, but not that aggressive
=--gc-keep-derivations= and =--gc-keep-outputs= to =guix-daemon= params
** NO Fix hardcoded =Guix_image= root partition name
** TODO Fix =gnupg= symlink\\
=guix home= =update-symlinks= creates =~/.gnupg= before my symlink activation service runs
therefore gnupg private keys are not symlinked\\
Target state:
*** =~/.gnupg= is a symlink to =/storage/data/gnupg=
*** =gpg-agent.conf= and =gpg.conf= are managed by =guix home=
** DONE +duplicate env entries because of ~doom env~+ (just delete the file)
** TODO counsel-spotify pollutes namespace because of :reader in EIEIO objects (name, artist ...)
** TODO emacs keybindings revamp
- winner to be replaced with custom window management
- evil bindings in EMMS buffers (q to close, SPC to enter)
- repeat Super+<digit> to switch (saved) window configurations
* archive :noexport:
** emacs-one-frame
#+begin_src sh :tangle no :shebang #!/bin/bash
# https://taingram.org/2017/05/09/using-emacsclient-to-speed-up-editing/
# if no args open new frame
if [ $# -eq 0 ]; then
    emacsclient -c -n
    exit
fi

emacsclient -e "(frames-on-display-list \"$DISPLAY\")" &>/dev/null

if [ $? -eq 0 ]; then
    emacsclient -n "$*"
else
    emacsclient -c -n "$*"
fi
#+end_src
** openscad
#+begin_src elisp :tangle no
(defun openscad-preview ()
  (interactive)
  (select-window (split-window-right))
  (start-process "openscad" nil "openscad" (buffer-file-name)))
#+end_src

** selfcontrol
#+begin_src elisp :tangle no
(defun sarg/ad-selfcontrol-time-restriction (orig-fun &rest args)
  (if (or (= 0 (mod
                (calendar-day-of-week (calendar-current-date))
                6)) ; 0 and 6 - Sunday and Saturday
          (> (nth 2 (decode-time)) 18))
      (apply orig-fun args)
    (message "It's not the time yet!")))

(defun sarg/ad-selfcontrol-otp-confirm (proc &rest args)
  "Asks to enter random string as confirmation before executing PROC."
  (interactive)
  (let* ((pass (format "%06x%06x%06x"
                       (random (expt 16 6))
                       (random (expt 16 6))
                       (random (expt 16 6))))

         (input (read-string (format "Enter %s if you wish to proceed: " pass))))

    (if (string= input pass)
        (apply proc args))))

(after! elfeed
  (advice-add 'elfeed-update :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add '=rss :around #'sarg/ad-selfcontrol-otp-confirm)
  (advice-add 'elfeed-update :around #'sarg/selfcontrol-time-restriction))

(after! telega
  (advice-add 'ivy-telega-chat-with :around #'sarg/ad-selfcontrol-otp-confirm))
#+end_src

** fate
#+begin_src elisp :tangle no
(use-package! fate
  :disabled
  :load-path "~/devel/ext/fate"
  :config
  (setq fate:data-file "~/.events/win")

  (defun fate:buffer-string (buffer)
    "Return either path or name of BUFFER."
    (or (buffer-file-name buffer)
        (buffer-name buffer)))

  (defun fate:log-state (state)
    "Write STATE to the database file."
    (write-region state nil fate:data-file 'append :inhibit))

  (defun fate:state-string-base (left right)
    "Represent state using LEFT and RIGHT."
    (format "%s;win;%s;%s\n"
            (format-time-string "%s.%6N")
            (fate:escape left)
            (fate:escape right))))
#+end_src
