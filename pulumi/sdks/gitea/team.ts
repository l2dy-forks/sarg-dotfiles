// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * Flag if the Teams members should be able to create Rpositories in the Organisation
     */
    public readonly canCreateRepos!: pulumi.Output<boolean | undefined>;
    /**
     * Description of the Team
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Flag if the Teams members should have access to all Repositories in the Organisation
     */
    public readonly includeAllRepositories!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the Team
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organisation which this Team is part of.
     */
    public readonly organisation!: pulumi.Output<string>;
    /**
     * Permissions associated with this Team Can be `none`, `read`, `write`, `admin` or `owner`
     */
    public readonly permission!: pulumi.Output<string | undefined>;
    /**
     * List of Repositories that should be part of this team
     */
    public readonly repositories!: pulumi.Output<string[]>;
    public readonly teamId!: pulumi.Output<string>;
    /**
     * List of types of Repositories that should be allowed to be created from Team members. Can be `repo.code`, `repo.issues`,
     * `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
     */
    public readonly units!: pulumi.Output<string | undefined>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["canCreateRepos"] = state ? state.canCreateRepos : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["includeAllRepositories"] = state ? state.includeAllRepositories : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organisation"] = state ? state.organisation : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["units"] = state ? state.units : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.organisation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organisation'");
            }
            resourceInputs["canCreateRepos"] = args ? args.canCreateRepos : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["includeAllRepositories"] = args ? args.includeAllRepositories : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organisation"] = args ? args.organisation : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["repositories"] = args ? args.repositories : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["units"] = args ? args.units : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * Flag if the Teams members should be able to create Rpositories in the Organisation
     */
    canCreateRepos?: pulumi.Input<boolean>;
    /**
     * Description of the Team
     */
    description?: pulumi.Input<string>;
    /**
     * Flag if the Teams members should have access to all Repositories in the Organisation
     */
    includeAllRepositories?: pulumi.Input<boolean>;
    /**
     * Name of the Team
     */
    name?: pulumi.Input<string>;
    /**
     * The organisation which this Team is part of.
     */
    organisation?: pulumi.Input<string>;
    /**
     * Permissions associated with this Team Can be `none`, `read`, `write`, `admin` or `owner`
     */
    permission?: pulumi.Input<string>;
    /**
     * List of Repositories that should be part of this team
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
    teamId?: pulumi.Input<string>;
    /**
     * List of types of Repositories that should be allowed to be created from Team members. Can be `repo.code`, `repo.issues`,
     * `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
     */
    units?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * Flag if the Teams members should be able to create Rpositories in the Organisation
     */
    canCreateRepos?: pulumi.Input<boolean>;
    /**
     * Description of the Team
     */
    description?: pulumi.Input<string>;
    /**
     * Flag if the Teams members should have access to all Repositories in the Organisation
     */
    includeAllRepositories?: pulumi.Input<boolean>;
    /**
     * Name of the Team
     */
    name?: pulumi.Input<string>;
    /**
     * The organisation which this Team is part of.
     */
    organisation: pulumi.Input<string>;
    /**
     * Permissions associated with this Team Can be `none`, `read`, `write`, `admin` or `owner`
     */
    permission?: pulumi.Input<string>;
    /**
     * List of Repositories that should be part of this team
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
    teamId?: pulumi.Input<string>;
    /**
     * List of types of Repositories that should be allowed to be created from Team members. Can be `repo.code`, `repo.issues`,
     * `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
     */
    units?: pulumi.Input<string>;
}
