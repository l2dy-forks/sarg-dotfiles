// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    public readonly allowManualMerge!: pulumi.Output<boolean | undefined>;
    public readonly allowMergeCommits!: pulumi.Output<boolean | undefined>;
    public readonly allowRebase!: pulumi.Output<boolean | undefined>;
    public readonly allowRebaseExplicit!: pulumi.Output<boolean | undefined>;
    public readonly allowSquashMerge!: pulumi.Output<boolean | undefined>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    public readonly archiveOnDestroy!: pulumi.Output<boolean | undefined>;
    public readonly archived!: pulumi.Output<boolean | undefined>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    public readonly autoInit!: pulumi.Output<boolean | undefined>;
    public readonly autodetectManualMerge!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly cloneUrl!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    public readonly defaultBranch!: pulumi.Output<string | undefined>;
    /**
     * The description of the repository.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    public readonly gitignores!: pulumi.Output<string | undefined>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    public readonly hasIssues!: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    public readonly hasProjects!: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    public readonly hasPullRequests!: pulumi.Output<boolean | undefined>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    public readonly hasWiki!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    public readonly ignoreWhitespaceConflicts!: pulumi.Output<boolean | undefined>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    public readonly issueLabels!: pulumi.Output<string | undefined>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    public readonly license!: pulumi.Output<string | undefined>;
    public readonly migrationCloneAddress!: pulumi.Output<string | undefined>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    public readonly migrationCloneAddresse!: pulumi.Output<string | undefined>;
    public readonly migrationIssueLabels!: pulumi.Output<boolean | undefined>;
    public readonly migrationLfs!: pulumi.Output<boolean | undefined>;
    public readonly migrationLfsEndpoint!: pulumi.Output<string | undefined>;
    public readonly migrationMilestones!: pulumi.Output<boolean | undefined>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    public readonly migrationMirrorInterval!: pulumi.Output<string | undefined>;
    public readonly migrationReleases!: pulumi.Output<boolean | undefined>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    public readonly migrationService!: pulumi.Output<string | undefined>;
    public readonly migrationServiceAuthPassword!: pulumi.Output<string | undefined>;
    public readonly migrationServiceAuthToken!: pulumi.Output<string | undefined>;
    public readonly migrationServiceAuthUsername!: pulumi.Output<string | undefined>;
    public readonly mirror!: pulumi.Output<boolean | undefined>;
    /**
     * The Name of the repository
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly permissionAdmin!: pulumi.Output<boolean>;
    public /*out*/ readonly permissionPull!: pulumi.Output<boolean>;
    public /*out*/ readonly permissionPush!: pulumi.Output<boolean>;
    /**
     * Flag if the repository should be private or not.
     */
    public readonly private!: pulumi.Output<boolean | undefined>;
    public readonly readme!: pulumi.Output<string | undefined>;
    public readonly repoTemplate!: pulumi.Output<boolean | undefined>;
    public readonly repositoryId!: pulumi.Output<string>;
    public /*out*/ readonly sshUrl!: pulumi.Output<string>;
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * The Owner of the repository
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * A link to a website with more information.
     */
    public readonly website!: pulumi.Output<string | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["allowManualMerge"] = state ? state.allowManualMerge : undefined;
            resourceInputs["allowMergeCommits"] = state ? state.allowMergeCommits : undefined;
            resourceInputs["allowRebase"] = state ? state.allowRebase : undefined;
            resourceInputs["allowRebaseExplicit"] = state ? state.allowRebaseExplicit : undefined;
            resourceInputs["allowSquashMerge"] = state ? state.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["autoInit"] = state ? state.autoInit : undefined;
            resourceInputs["autodetectManualMerge"] = state ? state.autodetectManualMerge : undefined;
            resourceInputs["cloneUrl"] = state ? state.cloneUrl : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gitignores"] = state ? state.gitignores : undefined;
            resourceInputs["hasIssues"] = state ? state.hasIssues : undefined;
            resourceInputs["hasProjects"] = state ? state.hasProjects : undefined;
            resourceInputs["hasPullRequests"] = state ? state.hasPullRequests : undefined;
            resourceInputs["hasWiki"] = state ? state.hasWiki : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["ignoreWhitespaceConflicts"] = state ? state.ignoreWhitespaceConflicts : undefined;
            resourceInputs["issueLabels"] = state ? state.issueLabels : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["migrationCloneAddress"] = state ? state.migrationCloneAddress : undefined;
            resourceInputs["migrationCloneAddresse"] = state ? state.migrationCloneAddresse : undefined;
            resourceInputs["migrationIssueLabels"] = state ? state.migrationIssueLabels : undefined;
            resourceInputs["migrationLfs"] = state ? state.migrationLfs : undefined;
            resourceInputs["migrationLfsEndpoint"] = state ? state.migrationLfsEndpoint : undefined;
            resourceInputs["migrationMilestones"] = state ? state.migrationMilestones : undefined;
            resourceInputs["migrationMirrorInterval"] = state ? state.migrationMirrorInterval : undefined;
            resourceInputs["migrationReleases"] = state ? state.migrationReleases : undefined;
            resourceInputs["migrationService"] = state ? state.migrationService : undefined;
            resourceInputs["migrationServiceAuthPassword"] = state ? state.migrationServiceAuthPassword : undefined;
            resourceInputs["migrationServiceAuthToken"] = state ? state.migrationServiceAuthToken : undefined;
            resourceInputs["migrationServiceAuthUsername"] = state ? state.migrationServiceAuthUsername : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionAdmin"] = state ? state.permissionAdmin : undefined;
            resourceInputs["permissionPull"] = state ? state.permissionPull : undefined;
            resourceInputs["permissionPush"] = state ? state.permissionPush : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["readme"] = state ? state.readme : undefined;
            resourceInputs["repoTemplate"] = state ? state.repoTemplate : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["sshUrl"] = state ? state.sshUrl : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowManualMerge"] = args ? args.allowManualMerge : undefined;
            resourceInputs["allowMergeCommits"] = args ? args.allowMergeCommits : undefined;
            resourceInputs["allowRebase"] = args ? args.allowRebase : undefined;
            resourceInputs["allowRebaseExplicit"] = args ? args.allowRebaseExplicit : undefined;
            resourceInputs["allowSquashMerge"] = args ? args.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["archived"] = args ? args.archived : undefined;
            resourceInputs["autoInit"] = args ? args.autoInit : undefined;
            resourceInputs["autodetectManualMerge"] = args ? args.autodetectManualMerge : undefined;
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitignores"] = args ? args.gitignores : undefined;
            resourceInputs["hasIssues"] = args ? args.hasIssues : undefined;
            resourceInputs["hasProjects"] = args ? args.hasProjects : undefined;
            resourceInputs["hasPullRequests"] = args ? args.hasPullRequests : undefined;
            resourceInputs["hasWiki"] = args ? args.hasWiki : undefined;
            resourceInputs["ignoreWhitespaceConflicts"] = args ? args.ignoreWhitespaceConflicts : undefined;
            resourceInputs["issueLabels"] = args ? args.issueLabels : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["migrationCloneAddress"] = args ? args.migrationCloneAddress : undefined;
            resourceInputs["migrationCloneAddresse"] = args ? args.migrationCloneAddresse : undefined;
            resourceInputs["migrationIssueLabels"] = args ? args.migrationIssueLabels : undefined;
            resourceInputs["migrationLfs"] = args ? args.migrationLfs : undefined;
            resourceInputs["migrationLfsEndpoint"] = args ? args.migrationLfsEndpoint : undefined;
            resourceInputs["migrationMilestones"] = args ? args.migrationMilestones : undefined;
            resourceInputs["migrationMirrorInterval"] = args ? args.migrationMirrorInterval : undefined;
            resourceInputs["migrationReleases"] = args ? args.migrationReleases : undefined;
            resourceInputs["migrationService"] = args ? args.migrationService : undefined;
            resourceInputs["migrationServiceAuthPassword"] = args?.migrationServiceAuthPassword ? pulumi.secret(args.migrationServiceAuthPassword) : undefined;
            resourceInputs["migrationServiceAuthToken"] = args?.migrationServiceAuthToken ? pulumi.secret(args.migrationServiceAuthToken) : undefined;
            resourceInputs["migrationServiceAuthUsername"] = args ? args.migrationServiceAuthUsername : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["readme"] = args ? args.readme : undefined;
            resourceInputs["repoTemplate"] = args ? args.repoTemplate : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["cloneUrl"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["permissionAdmin"] = undefined /*out*/;
            resourceInputs["permissionPull"] = undefined /*out*/;
            resourceInputs["permissionPush"] = undefined /*out*/;
            resourceInputs["sshUrl"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["migrationServiceAuthPassword", "migrationServiceAuthToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Repository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    allowManualMerge?: pulumi.Input<boolean>;
    allowMergeCommits?: pulumi.Input<boolean>;
    allowRebase?: pulumi.Input<boolean>;
    allowRebaseExplicit?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    autoInit?: pulumi.Input<boolean>;
    autodetectManualMerge?: pulumi.Input<boolean>;
    cloneUrl?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    gitignores?: pulumi.Input<string>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    hasProjects?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    hasPullRequests?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    htmlUrl?: pulumi.Input<string>;
    ignoreWhitespaceConflicts?: pulumi.Input<boolean>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    issueLabels?: pulumi.Input<string>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    license?: pulumi.Input<string>;
    migrationCloneAddress?: pulumi.Input<string>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    migrationCloneAddresse?: pulumi.Input<string>;
    migrationIssueLabels?: pulumi.Input<boolean>;
    migrationLfs?: pulumi.Input<boolean>;
    migrationLfsEndpoint?: pulumi.Input<string>;
    migrationMilestones?: pulumi.Input<boolean>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    migrationMirrorInterval?: pulumi.Input<string>;
    migrationReleases?: pulumi.Input<boolean>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    migrationService?: pulumi.Input<string>;
    migrationServiceAuthPassword?: pulumi.Input<string>;
    migrationServiceAuthToken?: pulumi.Input<string>;
    migrationServiceAuthUsername?: pulumi.Input<string>;
    mirror?: pulumi.Input<boolean>;
    /**
     * The Name of the repository
     */
    name?: pulumi.Input<string>;
    permissionAdmin?: pulumi.Input<boolean>;
    permissionPull?: pulumi.Input<boolean>;
    permissionPush?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be private or not.
     */
    private?: pulumi.Input<boolean>;
    readme?: pulumi.Input<string>;
    repoTemplate?: pulumi.Input<boolean>;
    repositoryId?: pulumi.Input<string>;
    sshUrl?: pulumi.Input<string>;
    updated?: pulumi.Input<string>;
    /**
     * The Owner of the repository
     */
    username?: pulumi.Input<string>;
    /**
     * A link to a website with more information.
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    allowManualMerge?: pulumi.Input<boolean>;
    allowMergeCommits?: pulumi.Input<boolean>;
    allowRebase?: pulumi.Input<boolean>;
    allowRebaseExplicit?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to archive the repository instead of deleting on destroy.
     */
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    /**
     * Flag if the repository should be initiated with the configured values
     */
    autoInit?: pulumi.Input<boolean>;
    autodetectManualMerge?: pulumi.Input<boolean>;
    /**
     * The default branch of the repository. Defaults to `main`
     */
    defaultBranch?: pulumi.Input<string>;
    /**
     * The description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true` Need to exist
     * in the gitea instance
     */
    gitignores?: pulumi.Input<string>;
    /**
     * A flag if the repository should have issue management enabled or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native project management enabled or not.
     */
    hasProjects?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should acceppt pull requests or not.
     */
    hasPullRequests?: pulumi.Input<boolean>;
    /**
     * A flag if the repository should have the native wiki enabled or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    ignoreWhitespaceConflicts?: pulumi.Input<boolean>;
    /**
     * The Issue Label configuration to be used in this repository. Need to exist in the gitea instance
     */
    issueLabels?: pulumi.Input<string>;
    /**
     * The license under which the source code of this repository should be. Need to exist in the gitea instance
     */
    license?: pulumi.Input<string>;
    migrationCloneAddress?: pulumi.Input<string>;
    /**
     * DEPRECATED in favor of `migration_clone_address`
     */
    migrationCloneAddresse?: pulumi.Input<string>;
    migrationIssueLabels?: pulumi.Input<boolean>;
    migrationLfs?: pulumi.Input<boolean>;
    migrationLfsEndpoint?: pulumi.Input<string>;
    migrationMilestones?: pulumi.Input<boolean>;
    /**
     * valid time units are 'h', 'm', 's'. 0 to disable automatic sync
     */
    migrationMirrorInterval?: pulumi.Input<string>;
    migrationReleases?: pulumi.Input<boolean>;
    /**
     * git/github/gitlab/gitea/gogs
     */
    migrationService?: pulumi.Input<string>;
    migrationServiceAuthPassword?: pulumi.Input<string>;
    migrationServiceAuthToken?: pulumi.Input<string>;
    migrationServiceAuthUsername?: pulumi.Input<string>;
    mirror?: pulumi.Input<boolean>;
    /**
     * The Name of the repository
     */
    name?: pulumi.Input<string>;
    /**
     * Flag if the repository should be private or not.
     */
    private?: pulumi.Input<boolean>;
    readme?: pulumi.Input<string>;
    repoTemplate?: pulumi.Input<boolean>;
    repositoryId?: pulumi.Input<string>;
    /**
     * The Owner of the repository
     */
    username: pulumi.Input<string>;
    /**
     * A link to a website with more information.
     */
    website?: pulumi.Input<string>;
}
