// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Oauth2App extends pulumi.CustomResource {
    /**
     * Get an existing Oauth2App resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Oauth2AppState, opts?: pulumi.CustomResourceOptions): Oauth2App {
        return new Oauth2App(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/oauth2App:Oauth2App';

    /**
     * Returns true if the given object is an instance of Oauth2App.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Oauth2App {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Oauth2App.__pulumiType;
    }

    /**
     * OAuth2 Application client id
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * Oauth2 Application client secret
     */
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    /**
     * If set to false, it will be a public client (PKCE will be required)
     */
    public readonly confidentialClient!: pulumi.Output<boolean | undefined>;
    /**
     * OAuth Application name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly oauth2AppId!: pulumi.Output<string>;
    /**
     * Accepted redirect URIs
     */
    public readonly redirectUris!: pulumi.Output<string[]>;

    /**
     * Create a Oauth2App resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Oauth2AppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Oauth2AppArgs | Oauth2AppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Oauth2AppState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["confidentialClient"] = state ? state.confidentialClient : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauth2AppId"] = state ? state.oauth2AppId : undefined;
            resourceInputs["redirectUris"] = state ? state.redirectUris : undefined;
        } else {
            const args = argsOrState as Oauth2AppArgs | undefined;
            if ((!args || args.redirectUris === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redirectUris'");
            }
            resourceInputs["confidentialClient"] = args ? args.confidentialClient : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauth2AppId"] = args ? args.oauth2AppId : undefined;
            resourceInputs["redirectUris"] = args ? args.redirectUris : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["clientSecret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Oauth2App.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Oauth2App resources.
 */
export interface Oauth2AppState {
    /**
     * OAuth2 Application client id
     */
    clientId?: pulumi.Input<string>;
    /**
     * Oauth2 Application client secret
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * If set to false, it will be a public client (PKCE will be required)
     */
    confidentialClient?: pulumi.Input<boolean>;
    /**
     * OAuth Application name
     */
    name?: pulumi.Input<string>;
    oauth2AppId?: pulumi.Input<string>;
    /**
     * Accepted redirect URIs
     */
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Oauth2App resource.
 */
export interface Oauth2AppArgs {
    /**
     * If set to false, it will be a public client (PKCE will be required)
     */
    confidentialClient?: pulumi.Input<boolean>;
    /**
     * OAuth Application name
     */
    name?: pulumi.Input<string>;
    oauth2AppId?: pulumi.Input<string>;
    /**
     * Accepted redirect URIs
     */
    redirectUris: pulumi.Input<pulumi.Input<string>[]>;
}
