// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitea:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Flag if this user should be active or not
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Flag if this user should be an administrator or not
     */
    public readonly admin!: pulumi.Output<boolean | undefined>;
    public readonly allowCreateOrganization!: pulumi.Output<boolean | undefined>;
    public readonly allowGitHook!: pulumi.Output<boolean | undefined>;
    public readonly allowImportLocal!: pulumi.Output<boolean | undefined>;
    /**
     * A description of the user
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * E-Mail Address of the user
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Flag if the user defined password should be overwritten or not
     */
    public readonly forcePasswordChange!: pulumi.Output<boolean | undefined>;
    /**
     * Full name of the user
     */
    public readonly fullName!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The login name can differ from the username
     */
    public readonly loginName!: pulumi.Output<string>;
    public readonly maxRepoCreation!: pulumi.Output<number | undefined>;
    /**
     * Flag if the user should change the password after first login
     */
    public readonly mustChangePassword!: pulumi.Output<boolean | undefined>;
    /**
     * Password to be set for the user
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Flag if the user should not be allowed to log in (bot user)
     */
    public readonly prohibitLogin!: pulumi.Output<boolean | undefined>;
    public readonly restricted!: pulumi.Output<boolean | undefined>;
    /**
     * Flag to send a notification about the user creation to the defined `email`
     */
    public readonly sendNotification!: pulumi.Output<boolean | undefined>;
    public readonly userId!: pulumi.Output<string>;
    /**
     * Username of the user to be created
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Visibility of the user. Can be `public`, `limited` or `private`
     */
    public readonly visibility!: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["admin"] = state ? state.admin : undefined;
            resourceInputs["allowCreateOrganization"] = state ? state.allowCreateOrganization : undefined;
            resourceInputs["allowGitHook"] = state ? state.allowGitHook : undefined;
            resourceInputs["allowImportLocal"] = state ? state.allowImportLocal : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["forcePasswordChange"] = state ? state.forcePasswordChange : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["maxRepoCreation"] = state ? state.maxRepoCreation : undefined;
            resourceInputs["mustChangePassword"] = state ? state.mustChangePassword : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prohibitLogin"] = state ? state.prohibitLogin : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["sendNotification"] = state ? state.sendNotification : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.loginName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["admin"] = args ? args.admin : undefined;
            resourceInputs["allowCreateOrganization"] = args ? args.allowCreateOrganization : undefined;
            resourceInputs["allowGitHook"] = args ? args.allowGitHook : undefined;
            resourceInputs["allowImportLocal"] = args ? args.allowImportLocal : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["forcePasswordChange"] = args ? args.forcePasswordChange : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["maxRepoCreation"] = args ? args.maxRepoCreation : undefined;
            resourceInputs["mustChangePassword"] = args ? args.mustChangePassword : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["prohibitLogin"] = args ? args.prohibitLogin : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["sendNotification"] = args ? args.sendNotification : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Flag if this user should be active or not
     */
    active?: pulumi.Input<boolean>;
    /**
     * Flag if this user should be an administrator or not
     */
    admin?: pulumi.Input<boolean>;
    allowCreateOrganization?: pulumi.Input<boolean>;
    allowGitHook?: pulumi.Input<boolean>;
    allowImportLocal?: pulumi.Input<boolean>;
    /**
     * A description of the user
     */
    description?: pulumi.Input<string>;
    /**
     * E-Mail Address of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Flag if the user defined password should be overwritten or not
     */
    forcePasswordChange?: pulumi.Input<boolean>;
    /**
     * Full name of the user
     */
    fullName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The login name can differ from the username
     */
    loginName?: pulumi.Input<string>;
    maxRepoCreation?: pulumi.Input<number>;
    /**
     * Flag if the user should change the password after first login
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Password to be set for the user
     */
    password?: pulumi.Input<string>;
    /**
     * Flag if the user should not be allowed to log in (bot user)
     */
    prohibitLogin?: pulumi.Input<boolean>;
    restricted?: pulumi.Input<boolean>;
    /**
     * Flag to send a notification about the user creation to the defined `email`
     */
    sendNotification?: pulumi.Input<boolean>;
    userId?: pulumi.Input<string>;
    /**
     * Username of the user to be created
     */
    username?: pulumi.Input<string>;
    /**
     * Visibility of the user. Can be `public`, `limited` or `private`
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Flag if this user should be active or not
     */
    active?: pulumi.Input<boolean>;
    /**
     * Flag if this user should be an administrator or not
     */
    admin?: pulumi.Input<boolean>;
    allowCreateOrganization?: pulumi.Input<boolean>;
    allowGitHook?: pulumi.Input<boolean>;
    allowImportLocal?: pulumi.Input<boolean>;
    /**
     * A description of the user
     */
    description?: pulumi.Input<string>;
    /**
     * E-Mail Address of the user
     */
    email: pulumi.Input<string>;
    /**
     * Flag if the user defined password should be overwritten or not
     */
    forcePasswordChange?: pulumi.Input<boolean>;
    /**
     * Full name of the user
     */
    fullName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The login name can differ from the username
     */
    loginName: pulumi.Input<string>;
    maxRepoCreation?: pulumi.Input<number>;
    /**
     * Flag if the user should change the password after first login
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Password to be set for the user
     */
    password: pulumi.Input<string>;
    /**
     * Flag if the user should not be allowed to log in (bot user)
     */
    prohibitLogin?: pulumi.Input<boolean>;
    restricted?: pulumi.Input<boolean>;
    /**
     * Flag to send a notification about the user creation to the defined `email`
     */
    sendNotification?: pulumi.Input<boolean>;
    userId?: pulumi.Input<string>;
    /**
     * Username of the user to be created
     */
    username: pulumi.Input<string>;
    /**
     * Visibility of the user. Can be `public`, `limited` or `private`
     */
    visibility?: pulumi.Input<string>;
}
