"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryBranchProtection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class RepositoryBranchProtection extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryBranchProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryBranchProtection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryBranchProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryBranchProtection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["approvalWhitelistTeams"] = state ? state.approvalWhitelistTeams : undefined;
            resourceInputs["approvalWhitelistUsers"] = state ? state.approvalWhitelistUsers : undefined;
            resourceInputs["blockMergeOnOfficialReviewRequests"] = state ? state.blockMergeOnOfficialReviewRequests : undefined;
            resourceInputs["blockMergeOnOutdatedBranch"] = state ? state.blockMergeOnOutdatedBranch : undefined;
            resourceInputs["blockMergeOnRejectedReviews"] = state ? state.blockMergeOnRejectedReviews : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dismissStaleApprovals"] = state ? state.dismissStaleApprovals : undefined;
            resourceInputs["enableApprovalWhitelist"] = state ? state.enableApprovalWhitelist : undefined;
            resourceInputs["enableMergeWhitelist"] = state ? state.enableMergeWhitelist : undefined;
            resourceInputs["enablePush"] = state ? state.enablePush : undefined;
            resourceInputs["enablePushWhitelist"] = state ? state.enablePushWhitelist : undefined;
            resourceInputs["enableStatusCheck"] = state ? state.enableStatusCheck : undefined;
            resourceInputs["mergeWhitelistTeams"] = state ? state.mergeWhitelistTeams : undefined;
            resourceInputs["mergeWhitelistUsers"] = state ? state.mergeWhitelistUsers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectedFilePatterns"] = state ? state.protectedFilePatterns : undefined;
            resourceInputs["pushWhitelistDeployKeys"] = state ? state.pushWhitelistDeployKeys : undefined;
            resourceInputs["pushWhitelistTeams"] = state ? state.pushWhitelistTeams : undefined;
            resourceInputs["pushWhitelistUsers"] = state ? state.pushWhitelistUsers : undefined;
            resourceInputs["repositoryBranchProtectionId"] = state ? state.repositoryBranchProtectionId : undefined;
            resourceInputs["requireSignedCommits"] = state ? state.requireSignedCommits : undefined;
            resourceInputs["requiredApprovals"] = state ? state.requiredApprovals : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["statusCheckPatterns"] = state ? state.statusCheckPatterns : undefined;
            resourceInputs["unprotectedFilePatterns"] = state ? state.unprotectedFilePatterns : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["approvalWhitelistTeams"] = args ? args.approvalWhitelistTeams : undefined;
            resourceInputs["approvalWhitelistUsers"] = args ? args.approvalWhitelistUsers : undefined;
            resourceInputs["blockMergeOnOfficialReviewRequests"] = args ? args.blockMergeOnOfficialReviewRequests : undefined;
            resourceInputs["blockMergeOnOutdatedBranch"] = args ? args.blockMergeOnOutdatedBranch : undefined;
            resourceInputs["blockMergeOnRejectedReviews"] = args ? args.blockMergeOnRejectedReviews : undefined;
            resourceInputs["dismissStaleApprovals"] = args ? args.dismissStaleApprovals : undefined;
            resourceInputs["enablePush"] = args ? args.enablePush : undefined;
            resourceInputs["mergeWhitelistTeams"] = args ? args.mergeWhitelistTeams : undefined;
            resourceInputs["mergeWhitelistUsers"] = args ? args.mergeWhitelistUsers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectedFilePatterns"] = args ? args.protectedFilePatterns : undefined;
            resourceInputs["pushWhitelistDeployKeys"] = args ? args.pushWhitelistDeployKeys : undefined;
            resourceInputs["pushWhitelistTeams"] = args ? args.pushWhitelistTeams : undefined;
            resourceInputs["pushWhitelistUsers"] = args ? args.pushWhitelistUsers : undefined;
            resourceInputs["repositoryBranchProtectionId"] = args ? args.repositoryBranchProtectionId : undefined;
            resourceInputs["requireSignedCommits"] = args ? args.requireSignedCommits : undefined;
            resourceInputs["requiredApprovals"] = args ? args.requiredApprovals : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["statusCheckPatterns"] = args ? args.statusCheckPatterns : undefined;
            resourceInputs["unprotectedFilePatterns"] = args ? args.unprotectedFilePatterns : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enableApprovalWhitelist"] = undefined /*out*/;
            resourceInputs["enableMergeWhitelist"] = undefined /*out*/;
            resourceInputs["enablePushWhitelist"] = undefined /*out*/;
            resourceInputs["enableStatusCheck"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryBranchProtection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.RepositoryBranchProtection = RepositoryBranchProtection;
/** @internal */
RepositoryBranchProtection.__pulumiType = 'gitea:index/repositoryBranchProtection:RepositoryBranchProtection';
//# sourceMappingURL=repositoryBranchProtection.js.map