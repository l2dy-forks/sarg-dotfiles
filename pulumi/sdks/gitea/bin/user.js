"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new User(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["admin"] = state ? state.admin : undefined;
            resourceInputs["allowCreateOrganization"] = state ? state.allowCreateOrganization : undefined;
            resourceInputs["allowGitHook"] = state ? state.allowGitHook : undefined;
            resourceInputs["allowImportLocal"] = state ? state.allowImportLocal : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["forcePasswordChange"] = state ? state.forcePasswordChange : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["maxRepoCreation"] = state ? state.maxRepoCreation : undefined;
            resourceInputs["mustChangePassword"] = state ? state.mustChangePassword : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prohibitLogin"] = state ? state.prohibitLogin : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["sendNotification"] = state ? state.sendNotification : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.loginName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["admin"] = args ? args.admin : undefined;
            resourceInputs["allowCreateOrganization"] = args ? args.allowCreateOrganization : undefined;
            resourceInputs["allowGitHook"] = args ? args.allowGitHook : undefined;
            resourceInputs["allowImportLocal"] = args ? args.allowImportLocal : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["forcePasswordChange"] = args ? args.forcePasswordChange : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["maxRepoCreation"] = args ? args.maxRepoCreation : undefined;
            resourceInputs["mustChangePassword"] = args ? args.mustChangePassword : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["prohibitLogin"] = args ? args.prohibitLogin : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["sendNotification"] = args ? args.sendNotification : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.User = User;
/** @internal */
User.__pulumiType = 'gitea:index/user:User';
//# sourceMappingURL=user.js.map