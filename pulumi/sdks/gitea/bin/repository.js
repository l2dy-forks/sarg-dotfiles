"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Repository = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Repository(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowManualMerge"] = state ? state.allowManualMerge : undefined;
            resourceInputs["allowMergeCommits"] = state ? state.allowMergeCommits : undefined;
            resourceInputs["allowRebase"] = state ? state.allowRebase : undefined;
            resourceInputs["allowRebaseExplicit"] = state ? state.allowRebaseExplicit : undefined;
            resourceInputs["allowSquashMerge"] = state ? state.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["autoInit"] = state ? state.autoInit : undefined;
            resourceInputs["autodetectManualMerge"] = state ? state.autodetectManualMerge : undefined;
            resourceInputs["cloneUrl"] = state ? state.cloneUrl : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gitignores"] = state ? state.gitignores : undefined;
            resourceInputs["hasIssues"] = state ? state.hasIssues : undefined;
            resourceInputs["hasProjects"] = state ? state.hasProjects : undefined;
            resourceInputs["hasPullRequests"] = state ? state.hasPullRequests : undefined;
            resourceInputs["hasWiki"] = state ? state.hasWiki : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["ignoreWhitespaceConflicts"] = state ? state.ignoreWhitespaceConflicts : undefined;
            resourceInputs["issueLabels"] = state ? state.issueLabels : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["migrationCloneAddress"] = state ? state.migrationCloneAddress : undefined;
            resourceInputs["migrationCloneAddresse"] = state ? state.migrationCloneAddresse : undefined;
            resourceInputs["migrationIssueLabels"] = state ? state.migrationIssueLabels : undefined;
            resourceInputs["migrationLfs"] = state ? state.migrationLfs : undefined;
            resourceInputs["migrationLfsEndpoint"] = state ? state.migrationLfsEndpoint : undefined;
            resourceInputs["migrationMilestones"] = state ? state.migrationMilestones : undefined;
            resourceInputs["migrationMirrorInterval"] = state ? state.migrationMirrorInterval : undefined;
            resourceInputs["migrationReleases"] = state ? state.migrationReleases : undefined;
            resourceInputs["migrationService"] = state ? state.migrationService : undefined;
            resourceInputs["migrationServiceAuthPassword"] = state ? state.migrationServiceAuthPassword : undefined;
            resourceInputs["migrationServiceAuthToken"] = state ? state.migrationServiceAuthToken : undefined;
            resourceInputs["migrationServiceAuthUsername"] = state ? state.migrationServiceAuthUsername : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionAdmin"] = state ? state.permissionAdmin : undefined;
            resourceInputs["permissionPull"] = state ? state.permissionPull : undefined;
            resourceInputs["permissionPush"] = state ? state.permissionPush : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["readme"] = state ? state.readme : undefined;
            resourceInputs["repoTemplate"] = state ? state.repoTemplate : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["sshUrl"] = state ? state.sshUrl : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowManualMerge"] = args ? args.allowManualMerge : undefined;
            resourceInputs["allowMergeCommits"] = args ? args.allowMergeCommits : undefined;
            resourceInputs["allowRebase"] = args ? args.allowRebase : undefined;
            resourceInputs["allowRebaseExplicit"] = args ? args.allowRebaseExplicit : undefined;
            resourceInputs["allowSquashMerge"] = args ? args.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["archived"] = args ? args.archived : undefined;
            resourceInputs["autoInit"] = args ? args.autoInit : undefined;
            resourceInputs["autodetectManualMerge"] = args ? args.autodetectManualMerge : undefined;
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitignores"] = args ? args.gitignores : undefined;
            resourceInputs["hasIssues"] = args ? args.hasIssues : undefined;
            resourceInputs["hasProjects"] = args ? args.hasProjects : undefined;
            resourceInputs["hasPullRequests"] = args ? args.hasPullRequests : undefined;
            resourceInputs["hasWiki"] = args ? args.hasWiki : undefined;
            resourceInputs["ignoreWhitespaceConflicts"] = args ? args.ignoreWhitespaceConflicts : undefined;
            resourceInputs["issueLabels"] = args ? args.issueLabels : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["migrationCloneAddress"] = args ? args.migrationCloneAddress : undefined;
            resourceInputs["migrationCloneAddresse"] = args ? args.migrationCloneAddresse : undefined;
            resourceInputs["migrationIssueLabels"] = args ? args.migrationIssueLabels : undefined;
            resourceInputs["migrationLfs"] = args ? args.migrationLfs : undefined;
            resourceInputs["migrationLfsEndpoint"] = args ? args.migrationLfsEndpoint : undefined;
            resourceInputs["migrationMilestones"] = args ? args.migrationMilestones : undefined;
            resourceInputs["migrationMirrorInterval"] = args ? args.migrationMirrorInterval : undefined;
            resourceInputs["migrationReleases"] = args ? args.migrationReleases : undefined;
            resourceInputs["migrationService"] = args ? args.migrationService : undefined;
            resourceInputs["migrationServiceAuthPassword"] = (args === null || args === void 0 ? void 0 : args.migrationServiceAuthPassword) ? pulumi.secret(args.migrationServiceAuthPassword) : undefined;
            resourceInputs["migrationServiceAuthToken"] = (args === null || args === void 0 ? void 0 : args.migrationServiceAuthToken) ? pulumi.secret(args.migrationServiceAuthToken) : undefined;
            resourceInputs["migrationServiceAuthUsername"] = args ? args.migrationServiceAuthUsername : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["readme"] = args ? args.readme : undefined;
            resourceInputs["repoTemplate"] = args ? args.repoTemplate : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["cloneUrl"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["permissionAdmin"] = undefined /*out*/;
            resourceInputs["permissionPull"] = undefined /*out*/;
            resourceInputs["permissionPush"] = undefined /*out*/;
            resourceInputs["sshUrl"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["migrationServiceAuthPassword", "migrationServiceAuthToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Repository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Repository = Repository;
/** @internal */
Repository.__pulumiType = 'gitea:index/repository:Repository';
//# sourceMappingURL=repository.js.map