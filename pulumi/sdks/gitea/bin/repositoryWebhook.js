"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryWebhook = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class RepositoryWebhook extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryWebhook(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryWebhook.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["authorizationHeader"] = state ? state.authorizationHeader : undefined;
            resourceInputs["branchFilter"] = state ? state.branchFilter : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repositoryWebhookId"] = state ? state.repositoryWebhookId : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.branchFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branchFilter'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.events === undefined) && !opts.urn) {
                throw new Error("Missing required property 'events'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["authorizationHeader"] = args ? args.authorizationHeader : undefined;
            resourceInputs["branchFilter"] = args ? args.branchFilter : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repositoryWebhookId"] = args ? args.repositoryWebhookId : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryWebhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.RepositoryWebhook = RepositoryWebhook;
/** @internal */
RepositoryWebhook.__pulumiType = 'gitea:index/repositoryWebhook:RepositoryWebhook';
//# sourceMappingURL=repositoryWebhook.js.map