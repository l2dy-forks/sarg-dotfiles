"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.User = exports.Token = exports.TeamMembership = exports.TeamMembers = exports.Team = exports.RepositoryWebhook = exports.RepositoryKey = exports.RepositoryBranchProtection = exports.RepositoryActionsVariable = exports.RepositoryActionsSecret = exports.Repository = exports.PublicKey = exports.Provider = exports.Org = exports.Oauth2App = exports.GpgKey = exports.GitHook = exports.getUserOutput = exports.getUser = exports.getRepoOutput = exports.getRepo = exports.getOrgOutput = exports.getOrg = exports.Fork = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Fork = null;
utilities.lazyLoad(exports, ["Fork"], () => require("./fork"));
exports.getOrg = null;
exports.getOrgOutput = null;
utilities.lazyLoad(exports, ["getOrg", "getOrgOutput"], () => require("./getOrg"));
exports.getRepo = null;
exports.getRepoOutput = null;
utilities.lazyLoad(exports, ["getRepo", "getRepoOutput"], () => require("./getRepo"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.GitHook = null;
utilities.lazyLoad(exports, ["GitHook"], () => require("./gitHook"));
exports.GpgKey = null;
utilities.lazyLoad(exports, ["GpgKey"], () => require("./gpgKey"));
exports.Oauth2App = null;
utilities.lazyLoad(exports, ["Oauth2App"], () => require("./oauth2App"));
exports.Org = null;
utilities.lazyLoad(exports, ["Org"], () => require("./org"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.PublicKey = null;
utilities.lazyLoad(exports, ["PublicKey"], () => require("./publicKey"));
exports.Repository = null;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));
exports.RepositoryActionsSecret = null;
utilities.lazyLoad(exports, ["RepositoryActionsSecret"], () => require("./repositoryActionsSecret"));
exports.RepositoryActionsVariable = null;
utilities.lazyLoad(exports, ["RepositoryActionsVariable"], () => require("./repositoryActionsVariable"));
exports.RepositoryBranchProtection = null;
utilities.lazyLoad(exports, ["RepositoryBranchProtection"], () => require("./repositoryBranchProtection"));
exports.RepositoryKey = null;
utilities.lazyLoad(exports, ["RepositoryKey"], () => require("./repositoryKey"));
exports.RepositoryWebhook = null;
utilities.lazyLoad(exports, ["RepositoryWebhook"], () => require("./repositoryWebhook"));
exports.Team = null;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));
exports.TeamMembers = null;
utilities.lazyLoad(exports, ["TeamMembers"], () => require("./teamMembers"));
exports.TeamMembership = null;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));
exports.Token = null;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gitea:index/fork:Fork":
                return new exports.Fork(name, undefined, { urn });
            case "gitea:index/gitHook:GitHook":
                return new exports.GitHook(name, undefined, { urn });
            case "gitea:index/gpgKey:GpgKey":
                return new exports.GpgKey(name, undefined, { urn });
            case "gitea:index/oauth2App:Oauth2App":
                return new exports.Oauth2App(name, undefined, { urn });
            case "gitea:index/org:Org":
                return new exports.Org(name, undefined, { urn });
            case "gitea:index/publicKey:PublicKey":
                return new exports.PublicKey(name, undefined, { urn });
            case "gitea:index/repository:Repository":
                return new exports.Repository(name, undefined, { urn });
            case "gitea:index/repositoryActionsSecret:RepositoryActionsSecret":
                return new exports.RepositoryActionsSecret(name, undefined, { urn });
            case "gitea:index/repositoryActionsVariable:RepositoryActionsVariable":
                return new exports.RepositoryActionsVariable(name, undefined, { urn });
            case "gitea:index/repositoryBranchProtection:RepositoryBranchProtection":
                return new exports.RepositoryBranchProtection(name, undefined, { urn });
            case "gitea:index/repositoryKey:RepositoryKey":
                return new exports.RepositoryKey(name, undefined, { urn });
            case "gitea:index/repositoryWebhook:RepositoryWebhook":
                return new exports.RepositoryWebhook(name, undefined, { urn });
            case "gitea:index/team:Team":
                return new exports.Team(name, undefined, { urn });
            case "gitea:index/teamMembers:TeamMembers":
                return new exports.TeamMembers(name, undefined, { urn });
            case "gitea:index/teamMembership:TeamMembership":
                return new exports.TeamMembership(name, undefined, { urn });
            case "gitea:index/token:Token":
                return new exports.Token(name, undefined, { urn });
            case "gitea:index/user:User":
                return new exports.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gitea", "index/fork", _module);
pulumi.runtime.registerResourceModule("gitea", "index/gitHook", _module);
pulumi.runtime.registerResourceModule("gitea", "index/gpgKey", _module);
pulumi.runtime.registerResourceModule("gitea", "index/oauth2App", _module);
pulumi.runtime.registerResourceModule("gitea", "index/org", _module);
pulumi.runtime.registerResourceModule("gitea", "index/publicKey", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repository", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repositoryActionsSecret", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repositoryActionsVariable", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repositoryBranchProtection", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repositoryKey", _module);
pulumi.runtime.registerResourceModule("gitea", "index/repositoryWebhook", _module);
pulumi.runtime.registerResourceModule("gitea", "index/team", _module);
pulumi.runtime.registerResourceModule("gitea", "index/teamMembers", _module);
pulumi.runtime.registerResourceModule("gitea", "index/teamMembership", _module);
pulumi.runtime.registerResourceModule("gitea", "index/token", _module);
pulumi.runtime.registerResourceModule("gitea", "index/user", _module);
pulumi.runtime.registerResourcePackage("gitea", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:gitea") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map