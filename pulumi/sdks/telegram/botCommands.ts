// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BotCommands extends pulumi.CustomResource {
    /**
     * Get an existing BotCommands resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotCommandsState, opts?: pulumi.CustomResourceOptions): BotCommands {
        return new BotCommands(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'telegram:index/botCommands:BotCommands';

    /**
     * Returns true if the given object is an instance of BotCommands.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotCommands {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotCommands.__pulumiType;
    }

    public readonly botCommandsId!: pulumi.Output<string>;
    public readonly commands!: pulumi.Output<{[key: string]: string}[]>;

    /**
     * Create a BotCommands resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotCommandsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotCommandsArgs | BotCommandsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotCommandsState | undefined;
            resourceInputs["botCommandsId"] = state ? state.botCommandsId : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
        } else {
            const args = argsOrState as BotCommandsArgs | undefined;
            if ((!args || args.commands === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commands'");
            }
            resourceInputs["botCommandsId"] = args ? args.botCommandsId : undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotCommands.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BotCommands resources.
 */
export interface BotCommandsState {
    botCommandsId?: pulumi.Input<string>;
    commands?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}

/**
 * The set of arguments for constructing a BotCommands resource.
 */
export interface BotCommandsArgs {
    botCommandsId?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}
