"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotCommands = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class BotCommands extends pulumi.CustomResource {
    /**
     * Get an existing BotCommands resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new BotCommands(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BotCommands.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotCommands.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["botCommandsId"] = state ? state.botCommandsId : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.commands === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commands'");
            }
            resourceInputs["botCommandsId"] = args ? args.botCommandsId : undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotCommands.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.BotCommands = BotCommands;
/** @internal */
BotCommands.__pulumiType = 'telegram:index/botCommands:BotCommands';
//# sourceMappingURL=botCommands.js.map