// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BotCommandsArgs, BotCommandsState } from "./botCommands";
export type BotCommands = import("./botCommands").BotCommands;
export const BotCommands: typeof import("./botCommands").BotCommands = null as any;
utilities.lazyLoad(exports, ["BotCommands"], () => require("./botCommands"));

export { BotWebhookArgs, BotWebhookState } from "./botWebhook";
export type BotWebhook = import("./botWebhook").BotWebhook;
export const BotWebhook: typeof import("./botWebhook").BotWebhook = null as any;
utilities.lazyLoad(exports, ["BotWebhook"], () => require("./botWebhook"));

export { GetBotArgs, GetBotResult, GetBotOutputArgs } from "./getBot";
export const getBot: typeof import("./getBot").getBot = null as any;
export const getBotOutput: typeof import("./getBot").getBotOutput = null as any;
utilities.lazyLoad(exports, ["getBot","getBotOutput"], () => require("./getBot"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "telegram:index/botCommands:BotCommands":
                return new BotCommands(name, <any>undefined, { urn })
            case "telegram:index/botWebhook:BotWebhook":
                return new BotWebhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("telegram", "index/botCommands", _module)
pulumi.runtime.registerResourceModule("telegram", "index/botWebhook", _module)
pulumi.runtime.registerResourcePackage("telegram", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:telegram") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
